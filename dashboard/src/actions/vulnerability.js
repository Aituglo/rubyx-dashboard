import API from "./api";
import {
  GET_VULNERABILITY,
  GET_VULNERABILITY_ERROR,
  CREATE_VULNERABILITY,
  CREATE_VULNERABILITY_ERROR,
  DELETE_VULNERABILITY,
  DELETE_VULNERABILITY_ERROR,
  UPDATE_VULNERABILITY,
  UPDATE_VULNERABILITY_ERROR
} from "../constants/vulnerability";

export const getVulnerabilities = () => async (dispatch) => {
  try {
    API.getVulnerabilities()
      .then((data) => {
        dispatch({
          type: GET_VULNERABILITY,
          payload: data,
        });
      })
      .catch((err) => {
        dispatch({
          type: GET_VULNERABILITY_ERROR,
          payload: err,
        });
      });
  } catch (err) {
    dispatch({
      type: GET_VULNERABILITY_ERROR,
      payload: err,
    });
  }
};

export const createVulnerability = (program_id, url, severity, type) => async (dispatch) => {
  try {
    var vulnerability = {
      program_id: program_id,
      url: url,
      severity: severity,
      type: type
    };

    API.createVulnerability(vulnerability)
      .then((res) => {
        API.getVulnerabilities().then((data) => {
          dispatch({
            type: CREATE_VULNERABILITY,
            payload: data,
          });
        });
      })
      .catch((err) => {
        dispatch({
          type: CREATE_VULNERABILITY_ERROR,
          payload: err,
        });
      });
  } catch (err) {
    dispatch({
      type: CREATE_VULNERABILITY_ERROR,
      payload: err,
    });
  }
};

export const updateVulnerability = (id, program_id, url, severity, type) => async (dispatch) => {
  try {
    var vulnerability = {
      id: id,
      program_id: program_id,
      url: url,
      severity: severity,
      type: type
    };

    API.updateVulnerability(vulnerability)
      .then((res) => {
        API.getVulnerabilities().then((data) => {
          dispatch({
            type: UPDATE_VULNERABILITY,
            payload: data,
          });
        });
      })
      .catch((err) => {
        dispatch({
          type: UPDATE_VULNERABILITY_ERROR,
          payload: err,
        });
      });
  } catch (err) {
    dispatch({
      type: UPDATE_VULNERABILITY_ERROR,
      payload: err,
    });
  }
};

export const deleteVulnerability = (id) => async (dispatch) => {
  try {
    API.deleteVulnerability(id)
      .then((res) => {
        API.getVulnerabilities().then((data) => {
          dispatch({
            type: DELETE_VULNERABILITY,
            payload: data,
          });
        });
      })
      .catch((err) => {
        dispatch({
          type: DELETE_VULNERABILITY_ERROR,
          payload: err,
        });
      });
  } catch (err) {
    dispatch({
      type: DELETE_VULNERABILITY_ERROR,
      payload: err,
    });
  }
};
