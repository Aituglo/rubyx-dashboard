import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  deleteVulnerability,
  getVulnerabilities,
} from "../actions/vulnerability";
import PageTitle from "../components/Typography/PageTitle";
import { TrashIcon } from "../icons";
import {
  Table,
  TableHeader,
  TableCell,
  TableBody,
  TableRow,
  TableFooter,
  TableContainer,
  Button,
  Pagination,
} from "@windmill/react-ui";
import ClipLoader from "react-spinners/ClipLoader";
import { getPrograms } from "../actions/program";
import Input from "../components/Input";
import Select from "react-tailwindcss-select";
import { getProgramName } from "../utils/misc";

const severities = [
  { value: "info", label: "Info" },
  { value: "low", label: "Low" },
  { value: "medium", label: "Medium" },
  { value: "high", label: "High" },
  { value: "critical", label: "Critical" },
];

function Vulnerability() {
  const dispatch = useDispatch();

  const vulnerabilityState = useSelector((state) => state.vulnerability);
  const programState = useSelector((state) => state.program);

  const [searchTerm, setSearchTerm] = useState("");
  const [filterProgram, setFilterProgram] = useState([]);
  const [programSelect, setProgramSelect] = useState([]);
  const [filterSeverity, setFilterSeverity] = useState([]);

  const resultsPerPage = 20;

  useEffect(() => {
    dispatch(getPrograms());
    dispatch(getVulnerabilities(0, resultsPerPage, "", "", 0));
  }, []);

  const onPageChangeTable = (p) => {
    let severity = filterSeverity
      ? filterSeverity.map((option) => option.value).join(",")
      : "";
    let program = filterProgram.value ? filterProgram.value : 0;
    dispatch(
      getVulnerabilities(p, resultsPerPage, searchTerm, severity, program)
    );
  }

  useEffect(() => {
    let severity = filterSeverity
      ? filterSeverity.map((option) => option.value).join(",")
      : "";
    let program = filterProgram.value ? filterProgram.value : 0;
    dispatch(
      getVulnerabilities(
        1,
        resultsPerPage,
        searchTerm,
        severity,
        program
      )
    );
  }, [searchTerm, filterProgram, filterSeverity]);

  useEffect(() => {
    if (programState && programState.programs) {
      let options = [
        { value: 0, label: "All" },
        ...programState.programs.map((program) => {
          return { value: program.id, label: program.name };
        }),
      ];
      setProgramSelect(options);
    }
  }, [programState]);

  return (
    <>
      <PageTitle>Vulnerabilities</PageTitle>

      <div className="px-4 py-3 mb-8 bg-white rounded-lg shadow-md dark:bg-gray-800">
        <div className="flex flex-col md:flex-row justify-center items-center mb-4 space-x-4">
          <Input
            className="text-gray-700"
            placeholder="Search for subdomain"
            aria-label="Search"
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Select
            value={filterProgram}
            isSearchable={true}
            placeholder="Filter by program"
            onChange={(e) => setFilterProgram(e)}
            options={programSelect}
          />
          <Select
            value={filterSeverity}
            isMultiple={true}
            placeholder="Filter by Severity"
            onChange={(e) => setFilterSeverity(e)}
            options={severities}
          />
        </div>

        {vulnerabilityState.loading && (
          <div className="flex justify-center items-center center">
            <ClipLoader color="#0f172a" loading={true} size={50} />
          </div>
        )}

        {vulnerabilityState.total && vulnerabilityState.total > 0 ? (
          <TableContainer
            className={`mb-8 ${vulnerabilityState.loading && "hidden"}`}
          >
            <Table>
              <TableHeader>
                <tr>
                  <TableCell>Program</TableCell>
                  <TableCell>Type</TableCell>
                  <TableCell>Url</TableCell>
                  <TableCell>Severity</TableCell>
                  <TableCell>Actions</TableCell>
                </tr>
              </TableHeader>
              <TableBody>
                {vulnerabilityState.vulnerabilities &&
                  vulnerabilityState.vulnerabilities.map((key, i) => (
                    <TableRow key={i}>
                      <TableCell>
                        <span className="text-sm">
                          {getProgramName(programState.programs, key.program_id)}
                        </span>
                      </TableCell>
                      <TableCell>
                        <span className="text-sm">{key.type}</span>
                      </TableCell>
                      <TableCell>
                        <span className="text-sm">{key.url}</span>
                      </TableCell>
                      <TableCell>
                        <span className="text-sm">{key.severity}</span>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-4">
                          <Button layout="link" size="icon" aria-label="Delete">
                            <TrashIcon
                              onClick={() => dispatch(deleteVulnerability(key.id, resultsPerPage))}
                              className="w-5 h-5"
                              aria-hidden="true"
                            />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
            <TableFooter>
              <Pagination
                totalResults={vulnerabilityState.total ? vulnerabilityState.total : 0}
                resultsPerPage={resultsPerPage}
                onChange={onPageChangeTable}
                label="Navigation"
              />
            </TableFooter>
          </TableContainer>
        ) : (
          <div className="flex items-center justify-center">
            <span className="text-sm">No data to display</span>
          </div>
        )}
      </div>
    </>
  );
}

export default Vulnerability;
