import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  deleteVulnerability,
  getVulnerabilities,
} from "../actions/vulnerability";
import PageTitle from "../components/Typography/PageTitle";
import { TrashIcon, EditIcon } from "../icons";
import {
  Table,
  TableHeader,
  TableCell,
  TableBody,
  TableRow,
  TableFooter,
  TableContainer,
  Button,
  Pagination,
} from "@windmill/react-ui";
import { getPrograms } from "../actions/program";

function Vulnerability() {
  const dispatch = useDispatch();
  const vulnerabilityState = useSelector((state) => state.vulnerability);
  const programState = useSelector((state) => state.program);


  useEffect(() => {
    dispatch(getPrograms());
    dispatch(getVulnerabilities());
  }, []);


  const handleDeleteVulnerability = (id) => {
    dispatch(deleteVulnerability(id));
  };


  const [pageTable, setPageTable] = useState(1);

  const [dataTable, setDataTable] = useState([]);

  // pagination setup
  const resultsPerPage = 10;
  const totalResults = vulnerabilityState.vulnerabilities
    ? vulnerabilityState.vulnerabilities.length
    : 0;

  function onPageChangeTable(p) {
    setPageTable(p);
  }

  const getProgramName = (id) => {
    if (programState && programState.programs) {
      var potential = programState.programs.find(
        (item) => item.id == parseInt(id)
      );
      if (potential) {
        return potential.name;
      } else {
        return "";
      }
    }
  };

  useEffect(() => {
    setDataTable(
      vulnerabilityState.vulnerabilities &&
        vulnerabilityState.vulnerabilities.slice(
          (pageTable - 1) * resultsPerPage,
          pageTable * resultsPerPage
        )
    );
  }, [pageTable, vulnerabilityState]);

  return (
    <>
      <PageTitle>Vulnerabilities</PageTitle>

      <div className="px-4 py-3 mb-8 bg-white rounded-lg shadow-md dark:bg-gray-800">

        {totalResults > 0 ? (
          <TableContainer className="mb-8">
            <Table>
              <TableHeader>
                <tr>
                  <TableCell>Program</TableCell>
                  <TableCell>Type</TableCell>
                  <TableCell>Url</TableCell>
                  <TableCell>Severity</TableCell>
                  <TableCell>Actions</TableCell>
                </tr>
              </TableHeader>
              <TableBody>
                {dataTable &&
                  dataTable.map((key, i) => (
                    <TableRow key={i}>
                      
                      <TableCell>
                        <span className="text-sm">
                          {getProgramName(key.program_id)}
                        </span>
                      </TableCell>
                      <TableCell>
                        <span className="text-sm">{key.type}</span>
                      </TableCell>
                      <TableCell>
                        <span className="text-sm">{key.url}</span>
                      </TableCell>
                      <TableCell>
                        <span className="text-sm">{key.severity}</span>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-4">
                          <Button layout="link" size="icon" aria-label="Delete">
                            <TrashIcon
                              onClick={() => handleDeleteVulnerability(key.id)}
                              className="w-5 h-5"
                              aria-hidden="true"
                            />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
            <TableFooter>
              <Pagination
                totalResults={totalResults}
                resultsPerPage={resultsPerPage}
                onChange={onPageChangeTable}
                label="Navigation"
              />
            </TableFooter>
          </TableContainer>
        ) : (
          <div className="flex items-center justify-center">
            <span className="text-sm">No data to display</span>
          </div>
        )}
      </div>
    </>
  );
}

export default Vulnerability;
