import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  deleteVulnerability,
  getVulnerabilities,
} from "../actions/vulnerability";
import PageTitle from "../components/Typography/PageTitle";
import { TrashIcon, EditIcon } from "../icons";
import {
  Table,
  TableHeader,
  TableCell,
  TableBody,
  TableRow,
  TableFooter,
  TableContainer,
  Button,
  Pagination,
} from "@windmill/react-ui";
import ClipLoader from "react-spinners/ClipLoader";
import { getPrograms } from "../actions/program";
import Input from "../components/Input";
import Select from "react-tailwindcss-select";

function Vulnerability() {
  const dispatch = useDispatch();
  const vulnerabilityState = useSelector((state) => state.vulnerability);
  const programState = useSelector((state) => state.program);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterProgram, setFilterProgram] = useState(0);
  const [programSelect, setProgramSelect] = useState([]);
  const [filterSeverity, setFilterSeverity] = useState([]);

  const [resultsPerPage, setResultsPerPage] = useState(10);
  const [pageTable, setPageTable] = useState(1);
  const totalResults = vulnerabilityState.total ? vulnerabilityState.total : 0;

  const severities = [
    { value: "info", label: "Info" },
    { value: "low", label: "Low" },
    { value: "medium", label: "Medium" },
    { value: "high", label: "High" },
    { value: "critical", label: "Critical" },
  ]

  function onPageChangeTable(p) {
    let severity = filterSeverity ? filterSeverity.map((option) => option.value).join(',') : "";
    let program = filterProgram.value ? filterProgram.value : 0;
    dispatch(getVulnerabilities(p, resultsPerPage, searchTerm, severity, program));
    setPageTable(p);
  }

  useEffect(() => {
    let severity = filterSeverity ? filterSeverity.map((option) => option.value).join(',') : "";
    let program = filterProgram.value ? filterProgram.value : 0;
    dispatch(getVulnerabilities(pageTable, resultsPerPage, searchTerm, severity, program));
  }, [searchTerm, filterProgram, filterSeverity]);

  useEffect(() => {
    dispatch(getPrograms());
    dispatch(getVulnerabilities(0, resultsPerPage, "", "", 0));
  }, []);

  useEffect(() => {
    if (programState && programState.programs) {
      let options = [
        { value: 0, label: "All" },
        ...programState.programs.map((program) => {
          return { value: program.id, label: program.name };
        }),
      ];
      setProgramSelect(options);
    }
  }, [programState]);

  const handleDeleteVulnerability = (id) => {
    dispatch(deleteVulnerability(id));
  }

  const handleSetFilterProgram = (e) => {
    setFilterProgram(e);
  };

  const getProgramName = (id) => {
    if (programState && programState.programs) {
      var potential = programState.programs.find(
        (item) => item.id == parseInt(id)
      );
      if (potential) {
        return potential.name;
      } else {
        return "";
      }
    }
  };

  return (
    <>
      <PageTitle>Vulnerabilities</PageTitle>

      <div className="px-4 py-3 mb-8 bg-white rounded-lg shadow-md dark:bg-gray-800">
        <div className="flex flex-col justify-between p-3">
          <div className="flex-2">
            <Input
              className="text-gray-700"
              placeholder="Search for subdomain"
              aria-label="Search"
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <div className="flex-2">
            <Select
              value={filterProgram}
              isSearchable={true}
              placeholder="Filter by program"
              onChange={(e) => handleSetFilterProgram(e)}
              options={programSelect}
            />
          </div>

          <div className="flex-2">
            <Select
              value={filterSeverity}
              isMultiple={true}
              placeholder="Filter by Severity"
              onChange={(e) => setFilterSeverity(e)}
              options={severities}
            />
          </div>

        </div>

        <TableContainer className="mb-8">
          <Table>
            <TableHeader>
              <tr>
                <TableCell>Program</TableCell>
                <TableCell>Type</TableCell>
                <TableCell>Url</TableCell>
                <TableCell>Severity</TableCell>
                <TableCell>Actions</TableCell>
              </tr>
            </TableHeader>
            <TableBody>
              {vulnerabilityState.loading ? (
                <div className="flex justify-center items-center center">
                  <ClipLoader color="#0f172a" loading={true} size={50} />
                </div>
              ) : totalResults > 0 ? (
                vulnerabilityState.vulnerabilities &&
                vulnerabilityState.vulnerabilities.map((key, i) => (
                  <TableRow key={i}>
                    <TableCell>
                      <span className="text-sm">
                        {getProgramName(key.program_id)}
                      </span>
                    </TableCell>
                    <TableCell>
                      <span className="text-sm">{key.type}</span>
                    </TableCell>
                    <TableCell>
                      <span className="text-sm">{key.url}</span>
                    </TableCell>
                    <TableCell>
                      <span className="text-sm">{key.severity}</span>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center space-x-4">
                        <Button layout="link" size="icon" aria-label="Delete">
                          <TrashIcon
                            onClick={() => handleDeleteVulnerability(key.id)}
                            className="w-5 h-5"
                            aria-hidden="true"
                          />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <div className="flex items-center justify-center">
                  <span className="text-sm">No data to display</span>
                </div>
              )}
            </TableBody>
          </Table>
          <TableFooter>
            <Pagination
              totalResults={totalResults}
              resultsPerPage={resultsPerPage}
              onChange={onPageChangeTable}
              label="Navigation"
            />
          </TableFooter>
        </TableContainer>
      </div>
    </>
  );
}

export default Vulnerability;
