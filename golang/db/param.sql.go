// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: param.sql

package db

import (
	"context"
)

const countParams = `-- name: CountParams :one
SELECT COUNT(*) FROM params
`

func (q *Queries) CountParams(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countParams)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createParam = `-- name: CreateParam :one
INSERT INTO params (url_id, param) VALUES ($1, $2) RETURNING id, url_id, param, created_at, updated_at
`

type CreateParamParams struct {
	UrlID int64  `json:"url_id"`
	Param string `json:"param"`
}

func (q *Queries) CreateParam(ctx context.Context, arg CreateParamParams) (Param, error) {
	row := q.db.QueryRow(ctx, createParam, arg.UrlID, arg.Param)
	var i Param
	err := row.Scan(
		&i.ID,
		&i.UrlID,
		&i.Param,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteParamByIDs = `-- name: DeleteParamByIDs :exec
DELETE FROM params WHERE id = $1
`

func (q *Queries) DeleteParamByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteParamByIDs, id)
	return err
}

const findParamByIDs = `-- name: FindParamByIDs :one
SELECT id, url_id, param, created_at, updated_at FROM params WHERE id = $1 LIMIT 1
`

func (q *Queries) FindParamByIDs(ctx context.Context, id int64) (Param, error) {
	row := q.db.QueryRow(ctx, findParamByIDs, id)
	var i Param
	err := row.Scan(
		&i.ID,
		&i.UrlID,
		&i.Param,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findParams = `-- name: FindParams :many
SELECT id, url_id, param, created_at, updated_at FROM params LIMIT $1 OFFSET $2
`

type FindParamsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindParams(ctx context.Context, arg FindParamsParams) ([]Param, error) {
	rows, err := q.db.Query(ctx, findParams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Param{}
	for rows.Next() {
		var i Param
		if err := rows.Scan(
			&i.ID,
			&i.UrlID,
			&i.Param,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findParamsWithParam = `-- name: FindParamsWithParam :many
SELECT id, url_id, param, created_at, updated_at FROM params WHERE param = $1  LIMIT $2 OFFSET $3
`

type FindParamsWithParamParams struct {
	Param  string `json:"param"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) FindParamsWithParam(ctx context.Context, arg FindParamsWithParamParams) ([]Param, error) {
	rows, err := q.db.Query(ctx, findParamsWithParam, arg.Param, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Param{}
	for rows.Next() {
		var i Param
		if err := rows.Scan(
			&i.ID,
			&i.UrlID,
			&i.Param,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findParamsWithUrlID = `-- name: FindParamsWithUrlID :many
SELECT id, url_id, param, created_at, updated_at FROM params WHERE url_id = $1 LIMIT $2 OFFSET $3
`

type FindParamsWithUrlIDParams struct {
	UrlID  int64 `json:"url_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindParamsWithUrlID(ctx context.Context, arg FindParamsWithUrlIDParams) ([]Param, error) {
	rows, err := q.db.Query(ctx, findParamsWithUrlID, arg.UrlID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Param{}
	for rows.Next() {
		var i Param
		if err := rows.Scan(
			&i.ID,
			&i.UrlID,
			&i.Param,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParam = `-- name: UpdateParam :one
UPDATE params SET url_id = $2, param = $3, updated_at = NOW() WHERE id = $1 RETURNING id, url_id, param, created_at, updated_at
`

type UpdateParamParams struct {
	ID    int64  `json:"id"`
	UrlID int64  `json:"url_id"`
	Param string `json:"param"`
}

func (q *Queries) UpdateParam(ctx context.Context, arg UpdateParamParams) (Param, error) {
	row := q.db.QueryRow(ctx, updateParam, arg.ID, arg.UrlID, arg.Param)
	var i Param
	err := row.Scan(
		&i.ID,
		&i.UrlID,
		&i.Param,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
