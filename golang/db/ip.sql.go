// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ip.sql

package db

import (
	"context"
)

const countIps = `-- name: CountIps :one
SELECT COUNT(*) FROM ip
`

func (q *Queries) CountIps(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countIps)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countIpsWithProgramID = `-- name: CountIpsWithProgramID :one
SELECT COUNT(*) FROM ip WHERE program_id = $1
`

func (q *Queries) CountIpsWithProgramID(ctx context.Context, programID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countIpsWithProgramID, programID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createIp = `-- name: CreateIp :one
INSERT INTO ip (program_id, ip) VALUES ($1, $2) RETURNING id, program_id, ip, created_at, updated_at
`

type CreateIpParams struct {
	ProgramID int64  `json:"program_id"`
	Ip        string `json:"ip"`
}

func (q *Queries) CreateIp(ctx context.Context, arg CreateIpParams) (Ip, error) {
	row := q.db.QueryRow(ctx, createIp, arg.ProgramID, arg.Ip)
	var i Ip
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Ip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIpByIDs = `-- name: DeleteIpByIDs :exec
DELETE FROM ip WHERE id = $1
`

func (q *Queries) DeleteIpByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIpByIDs, id)
	return err
}

const findAllIps = `-- name: FindAllIps :many
SELECT id, program_id, ip, created_at, updated_at FROM ip
`

func (q *Queries) FindAllIps(ctx context.Context) ([]Ip, error) {
	rows, err := q.db.Query(ctx, findAllIps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ip{}
	for rows.Next() {
		var i Ip
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Ip,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findIpByIDs = `-- name: FindIpByIDs :one
SELECT id, program_id, ip, created_at, updated_at FROM ip WHERE id = $1 LIMIT 1
`

func (q *Queries) FindIpByIDs(ctx context.Context, id int64) (Ip, error) {
	row := q.db.QueryRow(ctx, findIpByIDs, id)
	var i Ip
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Ip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findIpByIp = `-- name: FindIpByIp :one
SELECT id, program_id, ip, created_at, updated_at FROM ip WHERE ip = $1 LIMIT 1
`

func (q *Queries) FindIpByIp(ctx context.Context, ip string) (Ip, error) {
	row := q.db.QueryRow(ctx, findIpByIp, ip)
	var i Ip
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Ip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findIps = `-- name: FindIps :many
SELECT id, program_id, ip, created_at, updated_at FROM ip LIMIT $1 OFFSET $2
`

type FindIpsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindIps(ctx context.Context, arg FindIpsParams) ([]Ip, error) {
	rows, err := q.db.Query(ctx, findIps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ip{}
	for rows.Next() {
		var i Ip
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Ip,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findIpsWithIp = `-- name: FindIpsWithIp :many
SELECT id, program_id, ip, created_at, updated_at FROM ip WHERE ip = $1 LIMIT $2 OFFSET $3
`

type FindIpsWithIpParams struct {
	Ip     string `json:"ip"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) FindIpsWithIp(ctx context.Context, arg FindIpsWithIpParams) ([]Ip, error) {
	rows, err := q.db.Query(ctx, findIpsWithIp, arg.Ip, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ip{}
	for rows.Next() {
		var i Ip
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Ip,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findIpsWithProgramID = `-- name: FindIpsWithProgramID :many
SELECT id, program_id, ip, created_at, updated_at FROM ip WHERE program_id = $1 LIMIT $2 OFFSET $3
`

type FindIpsWithProgramIDParams struct {
	ProgramID int64 `json:"program_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) FindIpsWithProgramID(ctx context.Context, arg FindIpsWithProgramIDParams) ([]Ip, error) {
	rows, err := q.db.Query(ctx, findIpsWithProgramID, arg.ProgramID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ip{}
	for rows.Next() {
		var i Ip
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Ip,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIp = `-- name: UpdateIp :one
UPDATE ip SET program_id = $2, updated_at = NOW() WHERE id = $1 RETURNING id, program_id, ip, created_at, updated_at
`

type UpdateIpParams struct {
	ID        int64 `json:"id"`
	ProgramID int64 `json:"program_id"`
}

func (q *Queries) UpdateIp(ctx context.Context, arg UpdateIpParams) (Ip, error) {
	row := q.db.QueryRow(ctx, updateIp, arg.ID, arg.ProgramID)
	var i Ip
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Ip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
