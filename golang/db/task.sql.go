// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: task.sql

package db

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, domain, params, status, type, output)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, domain, params, type, status, start_time, end_time, created_at, updated_at, output
`

type CreateTaskParams struct {
	ID     int64  `json:"id"`
	Domain string `json:"domain"`
	Params string `json:"params"`
	Status string `json:"status"`
	Type   string `json:"type"`
	Output string `json:"output"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.ID,
		arg.Domain,
		arg.Params,
		arg.Status,
		arg.Type,
		arg.Output,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Params,
		&i.Type,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Output,
	)
	return i, err
}

const deleteTaskByIDs = `-- name: DeleteTaskByIDs :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTaskByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTaskByIDs, id)
	return err
}

const findTaskByID = `-- name: FindTaskByID :one
SELECT id, domain, params, type, status, start_time, end_time, created_at, updated_at, output FROM tasks WHERE id = $1 LIMIT 1
`

func (q *Queries) FindTaskByID(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, findTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Params,
		&i.Type,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Output,
	)
	return i, err
}

const findTasks = `-- name: FindTasks :many
SELECT id, domain, params, type, status, start_time, end_time, created_at, updated_at, output FROM tasks
`

func (q *Queries) FindTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, findTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Params,
			&i.Type,
			&i.Status,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Output,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET status = $2, start_time = $3, end_time = $4, output = $5, updated_at = now()
WHERE id = $1
RETURNING id, domain, params, type, status, start_time, end_time, created_at, updated_at, output
`

type UpdateTaskParams struct {
	ID        int64     `json:"id"`
	Status    string    `json:"status"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
	Output    string    `json:"output"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.Status,
		arg.StartTime,
		arg.EndTime,
		arg.Output,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Params,
		&i.Type,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Output,
	)
	return i, err
}
