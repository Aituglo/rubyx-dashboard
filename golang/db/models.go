// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type PlatformType string

const (
	PlatformTypePublic  PlatformType = "public"
	PlatformTypePrivate PlatformType = "private"
)

func (e *PlatformType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlatformType(s)
	case string:
		*e = PlatformType(s)
	default:
		return fmt.Errorf("unsupported scan type for PlatformType: %T", src)
	}
	return nil
}

type NullPlatformType struct {
	PlatformType PlatformType `json:"platform_type"`
	Valid        bool         `json:"valid"` // Valid is true if PlatformType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlatformType) Scan(value interface{}) error {
	if value == nil {
		ns.PlatformType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlatformType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlatformType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlatformType), nil
}

type ProgramType string

const (
	ProgramTypePublic  ProgramType = "public"
	ProgramTypePrivate ProgramType = "private"
)

func (e *ProgramType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProgramType(s)
	case string:
		*e = ProgramType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProgramType: %T", src)
	}
	return nil
}

type NullProgramType struct {
	ProgramType ProgramType `json:"program_type"`
	Valid       bool        `json:"valid"` // Valid is true if ProgramType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProgramType) Scan(value interface{}) error {
	if value == nil {
		ns.ProgramType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProgramType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProgramType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProgramType), nil
}

type Api struct {
	ID        int64     `json:"id"`
	UserID    int64     `json:"user_id"`
	ApiKey    string    `json:"api_key"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Ip struct {
	ID        int64     `json:"id"`
	ProgramID int64     `json:"program_id"`
	Ip        string    `json:"ip"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Param struct {
	ID        int64     `json:"id"`
	UrlID     int64     `json:"url_id"`
	Param     string    `json:"param"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Platform struct {
	ID             int64            `json:"id"`
	Name           string           `json:"name"`
	Slug           string           `json:"slug"`
	Email          *string          `json:"email"`
	Password       *string          `json:"password"`
	HunterUsername *string          `json:"hunter_username"`
	Otp            *string          `json:"otp"`
	Jwt            *string          `json:"jwt"`
	Type           NullPlatformType `json:"type"`
	CreatedAt      time.Time        `json:"created_at"`
	UpdatedAt      time.Time        `json:"updated_at"`
}

type Port struct {
	ID        int64     `json:"id"`
	IpID      int64     `json:"ip_id"`
	Port      int32     `json:"port"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Program struct {
	ID         int64       `json:"id"`
	PlatformID *int64      `json:"platform_id"`
	Name       string      `json:"name"`
	Slug       string      `json:"slug"`
	Vdp        bool        `json:"vdp"`
	Favourite  bool        `json:"favourite"`
	Tag        string      `json:"tag"`
	Url        string      `json:"url"`
	Type       ProgramType `json:"type"`
	CreatedAt  time.Time   `json:"created_at"`
	UpdatedAt  time.Time   `json:"updated_at"`
}

type Reset struct {
	UserID    int64     `json:"user_id"`
	Code      string    `json:"code"`
	CreatedAt time.Time `json:"created_at"`
}

type Scope struct {
	ID        int64     `json:"id"`
	ProgramID int64     `json:"program_id"`
	Scope     string    `json:"scope"`
	ScopeType string    `json:"scope_type"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Setting struct {
	ID        int64     `json:"id"`
	Key       string    `json:"key"`
	Value     string    `json:"value"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Stat struct {
	ID           int64     `json:"id"`
	PlatformID   int64     `json:"platform_id"`
	ReportID     string    `json:"report_id"`
	ReportTitle  string    `json:"report_title"`
	Severity     string    `json:"severity"`
	Reward       float32   `json:"reward"`
	Currency     string    `json:"currency"`
	Collab       bool      `json:"collab"`
	ReportStatus string    `json:"report_status"`
	ReportDate   time.Time `json:"report_date"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type Subdomain struct {
	ID            int64     `json:"id"`
	ProgramID     int64     `json:"program_id"`
	Subdomain     string    `json:"subdomain"`
	Tag           *string   `json:"tag"`
	Ip            *int64    `json:"ip"`
	Title         *string   `json:"title"`
	BodyHash      *string   `json:"body_hash"`
	StatusCode    *int32    `json:"status_code"`
	ContentLength *int32    `json:"content_length"`
	Screenshot    *string   `json:"screenshot"`
	Favourite     bool      `json:"favourite"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

type Task struct {
	ID        int64     `json:"id"`
	Domain    string    `json:"domain"`
	Params    string    `json:"params"`
	Type      string    `json:"type"`
	Status    string    `json:"status"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Output    string    `json:"output"`
}

type TechnologieSubdomain struct {
	ID                int64     `json:"id"`
	TechnologyVersion int64     `json:"technology_version"`
	SubdomainID       int64     `json:"subdomain_id"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

type TechnologieVersion struct {
	ID           int64     `json:"id"`
	TechnologyID int64     `json:"technology_id"`
	Version      string    `json:"version"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type Technology struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Url struct {
	ID          int64     `json:"id"`
	SubdomainID int64     `json:"subdomain_id"`
	Url         string    `json:"url"`
	Tag         string    `json:"tag"`
	StatusCode  int32     `json:"status_code"`
	Favourite   bool      `json:"favourite"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type User struct {
	ID        int64     `json:"id"`
	Email     string    `json:"email"`
	Username  string    `json:"username"`
	Pass      string    `json:"pass"`
	Salt      string    `json:"salt"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Vulnerability struct {
	ID        int64     `json:"id"`
	ProgramID int64     `json:"program_id"`
	Url       string    `json:"url"`
	Tag       string    `json:"tag"`
	Type      string    `json:"type"`
	Severity  string    `json:"severity"`
	Favourite bool      `json:"favourite"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}
