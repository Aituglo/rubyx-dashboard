// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type PlatformType string

const (
	PlatformTypePublic  PlatformType = "public"
	PlatformTypePrivate PlatformType = "private"
)

func (e *PlatformType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlatformType(s)
	case string:
		*e = PlatformType(s)
	default:
		return fmt.Errorf("unsupported scan type for PlatformType: %T", src)
	}
	return nil
}

type NullPlatformType struct {
	PlatformType PlatformType
	Valid        bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlatformType) Scan(value interface{}) error {
	if value == nil {
		ns.PlatformType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlatformType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlatformType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.PlatformType, nil
}

type ProgramType string

const (
	ProgramTypePublic  ProgramType = "public"
	ProgramTypePrivate ProgramType = "private"
)

func (e *ProgramType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProgramType(s)
	case string:
		*e = ProgramType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProgramType: %T", src)
	}
	return nil
}

type NullProgramType struct {
	ProgramType ProgramType
	Valid       bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProgramType) Scan(value interface{}) error {
	if value == nil {
		ns.ProgramType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProgramType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProgramType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ProgramType, nil
}

type UserStatus string

const (
	UserStatusDisabled   UserStatus = "disabled"
	UserStatusUnverified UserStatus = "unverified"
	UserStatusActive     UserStatus = "active"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.UserStatus, nil
}

type Api struct {
	ID        int64     `json:"id"`
	UserID    int64     `json:"user_id"`
	ApiKey    string    `json:"api_key"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Note struct {
	ID        int64     `json:"id"`
	Title     string    `json:"title"`
	ProgramID int64     `json:"program_id"`
	Content   string    `json:"content"`
	Tag       string    `json:"tag"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Platform struct {
	ID             int64        `json:"id"`
	Name           string       `json:"name"`
	Slug           string       `json:"slug"`
	Email          string       `json:"email"`
	Password       string       `json:"password"`
	HunterUsername string       `json:"hunter_username"`
	Otp            string       `json:"otp"`
	Jwt            string       `json:"jwt"`
	Type           PlatformType `json:"type"`
	CreatedAt      time.Time    `json:"created_at"`
	UpdatedAt      time.Time    `json:"updated_at"`
}

type Program struct {
	ID         int64       `json:"id"`
	PlatformID int64       `json:"platform_id"`
	Name       string      `json:"name"`
	Slug       string      `json:"slug"`
	Vdp        bool        `json:"vdp"`
	Tag        string      `json:"tag"`
	Url        string      `json:"url"`
	Type       ProgramType `json:"type"`
	CreatedAt  time.Time   `json:"created_at"`
	UpdatedAt  time.Time   `json:"updated_at"`
}

type Reset struct {
	UserID    int64     `json:"user_id"`
	Code      string    `json:"code"`
	CreatedAt time.Time `json:"created_at"`
}

type Scope struct {
	ID        int64     `json:"id"`
	Scope     string    `json:"scope"`
	ScopeType string    `json:"scope_type"`
	ProgramID int64     `json:"program_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Stat struct {
	ID           int64     `json:"id"`
	ReportID     string    `json:"report_id"`
	ReportTitle  string    `json:"report_title"`
	Severity     string    `json:"severity"`
	Reward       float32   `json:"reward"`
	Currency     string    `json:"currency"`
	Collab       bool      `json:"collab"`
	ReportStatus string    `json:"report_status"`
	ReportDate   time.Time `json:"report_date"`
	PlatformID   int64     `json:"platform_id"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type User struct {
	ID           int64      `json:"id"`
	Email        string     `json:"email"`
	Pass         string     `json:"pass"`
	Salt         string     `json:"salt"`
	Status       UserStatus `json:"status"`
	Verification string     `json:"verification"`
	CreatedAt    time.Time  `json:"created_at"`
	UpdatedAt    time.Time  `json:"updated_at"`
}
