// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: notes.sql

package db

import (
	"context"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (program_id, title, content, tag) VALUES ($1, $2, $3, $4) RETURNING id, title, program_id, content, tag, created_at, updated_at
`

type CreateNoteParams struct {
	ProgramID int64  `json:"program_id"`
	Title     string `json:"title"`
	Content   string `json:"content"`
	Tag       string `json:"tag"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote,
		arg.ProgramID,
		arg.Title,
		arg.Content,
		arg.Tag,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProgramID,
		&i.Content,
		&i.Tag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteNote, id)
	return err
}

const findNoteByID = `-- name: FindNoteByID :one
SELECT id, title, program_id, content, tag, created_at, updated_at FROM notes WHERE id = $1 LIMIT 1
`

func (q *Queries) FindNoteByID(ctx context.Context, id int64) (Note, error) {
	row := q.db.QueryRow(ctx, findNoteByID, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProgramID,
		&i.Content,
		&i.Tag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findNotes = `-- name: FindNotes :many
SELECT id, title, program_id, content, tag, created_at, updated_at FROM notes
`

func (q *Queries) FindNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.Query(ctx, findNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ProgramID,
			&i.Content,
			&i.Tag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNotesByProgramID = `-- name: FindNotesByProgramID :many
SELECT id, title, program_id, content, tag, created_at, updated_at FROM notes WHERE program_id = $1
`

func (q *Queries) FindNotesByProgramID(ctx context.Context, programID int64) ([]Note, error) {
	rows, err := q.db.Query(ctx, findNotesByProgramID, programID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ProgramID,
			&i.Content,
			&i.Tag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
SET program_id = $2, title = $3, content = $4, tag = $5, updated_at = now()
WHERE id = $1
RETURNING id, title, program_id, content, tag, created_at, updated_at
`

type UpdateNoteParams struct {
	ID        int64  `json:"id"`
	ProgramID int64  `json:"program_id"`
	Title     string `json:"title"`
	Content   string `json:"content"`
	Tag       string `json:"tag"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, updateNote,
		arg.ID,
		arg.ProgramID,
		arg.Title,
		arg.Content,
		arg.Tag,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProgramID,
		&i.Content,
		&i.Tag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
