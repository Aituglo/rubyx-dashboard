// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: platform.sql

package db

import (
	"context"
)

const createPlatform = `-- name: CreatePlatform :one
INSERT INTO platform (name, slug, url, type) VALUES ($1, $2, $3, $4) RETURNING id, name, slug, url, type, created_at, updated_at
`

type CreatePlatformParams struct {
	Name string       `json:"name"`
	Slug string       `json:"slug"`
	Url  string       `json:"url"`
	Type PlatformType `json:"type"`
}

func (q *Queries) CreatePlatform(ctx context.Context, arg CreatePlatformParams) (Platform, error) {
	row := q.db.QueryRow(ctx, createPlatform,
		arg.Name,
		arg.Slug,
		arg.Url,
		arg.Type,
	)
	var i Platform
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlatformByIDs = `-- name: DeletePlatformByIDs :exec
DELETE FROM platform WHERE id = $1
`

func (q *Queries) DeletePlatformByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePlatformByIDs, id)
	return err
}

const findPlatformByIDs = `-- name: FindPlatformByIDs :one
SELECT id, name, slug, url, type, created_at, updated_at FROM platform WHERE id = $1 LIMIT 1
`

func (q *Queries) FindPlatformByIDs(ctx context.Context, id int64) (Platform, error) {
	row := q.db.QueryRow(ctx, findPlatformByIDs, id)
	var i Platform
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPlatforms = `-- name: FindPlatforms :many
SELECT id, name, slug, url, type, created_at, updated_at FROM platform
`

func (q *Queries) FindPlatforms(ctx context.Context) ([]Platform, error) {
	rows, err := q.db.Query(ctx, findPlatforms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Platform{}
	for rows.Next() {
		var i Platform
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Url,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlatform = `-- name: UpdatePlatform :one
UPDATE platform SET name = $2, slug = $3, url = $4, type = $5, updated_at = NOW() WHERE id = $1 RETURNING id, name, slug, url, type, created_at, updated_at
`

type UpdatePlatformParams struct {
	ID   int64        `json:"id"`
	Name string       `json:"name"`
	Slug string       `json:"slug"`
	Url  string       `json:"url"`
	Type PlatformType `json:"type"`
}

func (q *Queries) UpdatePlatform(ctx context.Context, arg UpdatePlatformParams) (Platform, error) {
	row := q.db.QueryRow(ctx, updatePlatform,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Url,
		arg.Type,
	)
	var i Platform
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
