// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: screenshot.sql

package db

import (
	"context"
)

const countScreenshots = `-- name: CountScreenshots :one
SELECT COUNT(*) FROM screenshot
`

func (q *Queries) CountScreenshots(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countScreenshots)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createScreenshot = `-- name: CreateScreenshot :one
INSERT INTO screenshot (subdomain_id, screenshot) VALUES ($1, $2) RETURNING id, subdomain_id, screenshot, created_at, updated_at
`

type CreateScreenshotParams struct {
	SubdomainID int64  `json:"subdomain_id"`
	Screenshot  string `json:"screenshot"`
}

func (q *Queries) CreateScreenshot(ctx context.Context, arg CreateScreenshotParams) (Screenshot, error) {
	row := q.db.QueryRow(ctx, createScreenshot, arg.SubdomainID, arg.Screenshot)
	var i Screenshot
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Screenshot,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteScreenshotByIDs = `-- name: DeleteScreenshotByIDs :exec
DELETE FROM screenshot WHERE id = $1
`

func (q *Queries) DeleteScreenshotByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteScreenshotByIDs, id)
	return err
}

const findScreenshotByIDs = `-- name: FindScreenshotByIDs :one
SELECT id, subdomain_id, screenshot, created_at, updated_at FROM screenshot WHERE id = $1 LIMIT 1
`

func (q *Queries) FindScreenshotByIDs(ctx context.Context, id int64) (Screenshot, error) {
	row := q.db.QueryRow(ctx, findScreenshotByIDs, id)
	var i Screenshot
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Screenshot,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findScreenshots = `-- name: FindScreenshots :many
SELECT id, subdomain_id, screenshot, created_at, updated_at FROM screenshot LIMIT $1 OFFSET $2
`

type FindScreenshotsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindScreenshots(ctx context.Context, arg FindScreenshotsParams) ([]Screenshot, error) {
	rows, err := q.db.Query(ctx, findScreenshots, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Screenshot{}
	for rows.Next() {
		var i Screenshot
		if err := rows.Scan(
			&i.ID,
			&i.SubdomainID,
			&i.Screenshot,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findScreenshotsWithScreenshot = `-- name: FindScreenshotsWithScreenshot :many
SELECT id, subdomain_id, screenshot, created_at, updated_at FROM screenshot WHERE screenshot = $1  LIMIT $2 OFFSET $3
`

type FindScreenshotsWithScreenshotParams struct {
	Screenshot string `json:"screenshot"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) FindScreenshotsWithScreenshot(ctx context.Context, arg FindScreenshotsWithScreenshotParams) ([]Screenshot, error) {
	rows, err := q.db.Query(ctx, findScreenshotsWithScreenshot, arg.Screenshot, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Screenshot{}
	for rows.Next() {
		var i Screenshot
		if err := rows.Scan(
			&i.ID,
			&i.SubdomainID,
			&i.Screenshot,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findScreenshotsWithSubdomainID = `-- name: FindScreenshotsWithSubdomainID :many
SELECT id, subdomain_id, screenshot, created_at, updated_at FROM screenshot WHERE subdomain_id = $1 LIMIT $2 OFFSET $3
`

type FindScreenshotsWithSubdomainIDParams struct {
	SubdomainID int64 `json:"subdomain_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) FindScreenshotsWithSubdomainID(ctx context.Context, arg FindScreenshotsWithSubdomainIDParams) ([]Screenshot, error) {
	rows, err := q.db.Query(ctx, findScreenshotsWithSubdomainID, arg.SubdomainID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Screenshot{}
	for rows.Next() {
		var i Screenshot
		if err := rows.Scan(
			&i.ID,
			&i.SubdomainID,
			&i.Screenshot,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScreenshot = `-- name: UpdateScreenshot :one
UPDATE screenshot SET subdomain_id = $2, screenshot = $3, updated_at = NOW() WHERE id = $1 RETURNING id, subdomain_id, screenshot, created_at, updated_at
`

type UpdateScreenshotParams struct {
	ID          int64  `json:"id"`
	SubdomainID int64  `json:"subdomain_id"`
	Screenshot  string `json:"screenshot"`
}

func (q *Queries) UpdateScreenshot(ctx context.Context, arg UpdateScreenshotParams) (Screenshot, error) {
	row := q.db.QueryRow(ctx, updateScreenshot, arg.ID, arg.SubdomainID, arg.Screenshot)
	var i Screenshot
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Screenshot,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
