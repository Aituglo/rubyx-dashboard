// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: api.sql

package db

import (
	"context"
)

const createApi = `-- name: CreateApi :one
INSERT INTO api (user_id, api_key) VALUES ($1, $2) RETURNING id, user_id, api_key, created_at, updated_at
`

type CreateApiParams struct {
	UserID int64  `json:"user_id"`
	ApiKey string `json:"api_key"`
}

func (q *Queries) CreateApi(ctx context.Context, arg CreateApiParams) (Api, error) {
	row := q.db.QueryRow(ctx, createApi, arg.UserID, arg.ApiKey)
	var i Api
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApiByIDs = `-- name: DeleteApiByIDs :exec
DELETE FROM api WHERE id = $1
`

func (q *Queries) DeleteApiByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteApiByIDs, id)
	return err
}

const findApiByIDs = `-- name: FindApiByIDs :one
SELECT id, user_id, api_key, created_at, updated_at FROM api WHERE id = $1 LIMIT 1
`

func (q *Queries) FindApiByIDs(ctx context.Context, id int64) (Api, error) {
	row := q.db.QueryRow(ctx, findApiByIDs, id)
	var i Api
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findApis = `-- name: FindApis :many
SELECT id, user_id, api_key, created_at, updated_at FROM api
`

func (q *Queries) FindApis(ctx context.Context) ([]Api, error) {
	rows, err := q.db.Query(ctx, findApis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Api{}
	for rows.Next() {
		var i Api
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ApiKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
