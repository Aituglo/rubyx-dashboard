// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: subdomain.sql

package db

import (
	"context"
)

const createSubdomain = `-- name: CreateSubdomain :one
INSERT INTO subdomain (program_id, url, title, body_hash, status_code, technologies, content_length) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, program_id, url, title, body_hash, status_code, technologies, content_length, created_at, updated_at
`

type CreateSubdomainParams struct {
	ProgramID     int64  `json:"program_id"`
	Url           string `json:"url"`
	Title         string `json:"title"`
	BodyHash      string `json:"body_hash"`
	StatusCode    int32  `json:"status_code"`
	Technologies  string `json:"technologies"`
	ContentLength int32  `json:"content_length"`
}

func (q *Queries) CreateSubdomain(ctx context.Context, arg CreateSubdomainParams) (Subdomain, error) {
	row := q.db.QueryRow(ctx, createSubdomain,
		arg.ProgramID,
		arg.Url,
		arg.Title,
		arg.BodyHash,
		arg.StatusCode,
		arg.Technologies,
		arg.ContentLength,
	)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Url,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.Technologies,
		&i.ContentLength,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubdomainByIDs = `-- name: DeleteSubdomainByIDs :exec
DELETE FROM subdomain WHERE id = $1
`

func (q *Queries) DeleteSubdomainByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSubdomainByIDs, id)
	return err
}

const findSubdomainByIDs = `-- name: FindSubdomainByIDs :one
SELECT id, program_id, url, title, body_hash, status_code, technologies, content_length, created_at, updated_at FROM subdomain WHERE id = $1 LIMIT 1
`

func (q *Queries) FindSubdomainByIDs(ctx context.Context, id int64) (Subdomain, error) {
	row := q.db.QueryRow(ctx, findSubdomainByIDs, id)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Url,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.Technologies,
		&i.ContentLength,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSubdomains = `-- name: FindSubdomains :many
SELECT id, program_id, url, title, body_hash, status_code, technologies, content_length, created_at, updated_at FROM subdomain
`

func (q *Queries) FindSubdomains(ctx context.Context) ([]Subdomain, error) {
	rows, err := q.db.Query(ctx, findSubdomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subdomain{}
	for rows.Next() {
		var i Subdomain
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Url,
			&i.Title,
			&i.BodyHash,
			&i.StatusCode,
			&i.Technologies,
			&i.ContentLength,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubdomain = `-- name: UpdateSubdomain :one
UPDATE subdomain SET program_id = $2, url = $3, title = $4, body_hash = $5, status_code = $6, technologies = $7, content_length = $8, updated_at = NOW() WHERE id = $1 RETURNING id, program_id, url, title, body_hash, status_code, technologies, content_length, created_at, updated_at
`

type UpdateSubdomainParams struct {
	ID            int64  `json:"id"`
	ProgramID     int64  `json:"program_id"`
	Url           string `json:"url"`
	Title         string `json:"title"`
	BodyHash      string `json:"body_hash"`
	StatusCode    int32  `json:"status_code"`
	Technologies  string `json:"technologies"`
	ContentLength int32  `json:"content_length"`
}

func (q *Queries) UpdateSubdomain(ctx context.Context, arg UpdateSubdomainParams) (Subdomain, error) {
	row := q.db.QueryRow(ctx, updateSubdomain,
		arg.ID,
		arg.ProgramID,
		arg.Url,
		arg.Title,
		arg.BodyHash,
		arg.StatusCode,
		arg.Technologies,
		arg.ContentLength,
	)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Url,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.Technologies,
		&i.ContentLength,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
