// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: subdomain.sql

package db

import (
	"context"
)

const countSubdomains = `-- name: CountSubdomains :one
SELECT COUNT(*) FROM subdomain
`

func (q *Queries) CountSubdomains(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSubdomains)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSubdomainsWithProgramID = `-- name: CountSubdomainsWithProgramID :one
SELECT COUNT(*) FROM subdomain WHERE program_id = $1
`

func (q *Queries) CountSubdomainsWithProgramID(ctx context.Context, programID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countSubdomainsWithProgramID, programID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSubdomainsWithSearch = `-- name: CountSubdomainsWithSearch :one
SELECT COUNT(*) FROM subdomain WHERE subdomain LIKE $1
`

func (q *Queries) CountSubdomainsWithSearch(ctx context.Context, subdomain string) (int64, error) {
	row := q.db.QueryRow(ctx, countSubdomainsWithSearch, subdomain)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSubdomainsWithSearchAndProgramID = `-- name: CountSubdomainsWithSearchAndProgramID :one
SELECT COUNT(*) FROM subdomain WHERE subdomain LIKE $1 AND program_id = $2
`

type CountSubdomainsWithSearchAndProgramIDParams struct {
	Subdomain string `json:"subdomain"`
	ProgramID int64  `json:"program_id"`
}

func (q *Queries) CountSubdomainsWithSearchAndProgramID(ctx context.Context, arg CountSubdomainsWithSearchAndProgramIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countSubdomainsWithSearchAndProgramID, arg.Subdomain, arg.ProgramID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSubdomain = `-- name: CreateSubdomain :one
INSERT INTO subdomain (program_id, subdomain, title, body_hash, status_code, content_length, tag, ip, screenshot) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at
`

type CreateSubdomainParams struct {
	ProgramID     int64   `json:"program_id"`
	Subdomain     string  `json:"subdomain"`
	Title         *string `json:"title"`
	BodyHash      *string `json:"body_hash"`
	StatusCode    *int32  `json:"status_code"`
	ContentLength *int32  `json:"content_length"`
	Tag           *string `json:"tag"`
	Ip            *int64  `json:"ip"`
	Screenshot    *string `json:"screenshot"`
}

func (q *Queries) CreateSubdomain(ctx context.Context, arg CreateSubdomainParams) (Subdomain, error) {
	row := q.db.QueryRow(ctx, createSubdomain,
		arg.ProgramID,
		arg.Subdomain,
		arg.Title,
		arg.BodyHash,
		arg.StatusCode,
		arg.ContentLength,
		arg.Tag,
		arg.Ip,
		arg.Screenshot,
	)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Subdomain,
		&i.Tag,
		&i.Ip,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.ContentLength,
		&i.Screenshot,
		&i.Favourite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubdomainByIDs = `-- name: DeleteSubdomainByIDs :exec
DELETE FROM subdomain WHERE id = $1
`

func (q *Queries) DeleteSubdomainByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSubdomainByIDs, id)
	return err
}

const favouriteSubdomain = `-- name: FavouriteSubdomain :one
UPDATE subdomain SET favourite = $2, updated_at = NOW() WHERE id = $1 RETURNING id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at
`

type FavouriteSubdomainParams struct {
	ID        int64 `json:"id"`
	Favourite bool  `json:"favourite"`
}

func (q *Queries) FavouriteSubdomain(ctx context.Context, arg FavouriteSubdomainParams) (Subdomain, error) {
	row := q.db.QueryRow(ctx, favouriteSubdomain, arg.ID, arg.Favourite)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Subdomain,
		&i.Tag,
		&i.Ip,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.ContentLength,
		&i.Screenshot,
		&i.Favourite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAllSubdomains = `-- name: FindAllSubdomains :many
SELECT id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at FROM subdomain
`

func (q *Queries) FindAllSubdomains(ctx context.Context) ([]Subdomain, error) {
	rows, err := q.db.Query(ctx, findAllSubdomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subdomain{}
	for rows.Next() {
		var i Subdomain
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Subdomain,
			&i.Tag,
			&i.Ip,
			&i.Title,
			&i.BodyHash,
			&i.StatusCode,
			&i.ContentLength,
			&i.Screenshot,
			&i.Favourite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSubdomainByIDs = `-- name: FindSubdomainByIDs :one
SELECT id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at FROM subdomain WHERE id = $1 LIMIT 1
`

func (q *Queries) FindSubdomainByIDs(ctx context.Context, id int64) (Subdomain, error) {
	row := q.db.QueryRow(ctx, findSubdomainByIDs, id)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Subdomain,
		&i.Tag,
		&i.Ip,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.ContentLength,
		&i.Screenshot,
		&i.Favourite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSubdomains = `-- name: FindSubdomains :many
SELECT id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at FROM subdomain LIMIT $1 OFFSET $2
`

type FindSubdomainsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindSubdomains(ctx context.Context, arg FindSubdomainsParams) ([]Subdomain, error) {
	rows, err := q.db.Query(ctx, findSubdomains, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subdomain{}
	for rows.Next() {
		var i Subdomain
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Subdomain,
			&i.Tag,
			&i.Ip,
			&i.Title,
			&i.BodyHash,
			&i.StatusCode,
			&i.ContentLength,
			&i.Screenshot,
			&i.Favourite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSubdomainsBySubdomainAndProgramID = `-- name: FindSubdomainsBySubdomainAndProgramID :one
SELECT id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at FROM subdomain WHERE subdomain = $1 AND program_id = $2 LIMIT 1
`

type FindSubdomainsBySubdomainAndProgramIDParams struct {
	Subdomain string `json:"subdomain"`
	ProgramID int64  `json:"program_id"`
}

func (q *Queries) FindSubdomainsBySubdomainAndProgramID(ctx context.Context, arg FindSubdomainsBySubdomainAndProgramIDParams) (Subdomain, error) {
	row := q.db.QueryRow(ctx, findSubdomainsBySubdomainAndProgramID, arg.Subdomain, arg.ProgramID)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Subdomain,
		&i.Tag,
		&i.Ip,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.ContentLength,
		&i.Screenshot,
		&i.Favourite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSubdomainsWithProgramID = `-- name: FindSubdomainsWithProgramID :many
SELECT id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at FROM subdomain WHERE program_id = $1 LIMIT $2 OFFSET $3
`

type FindSubdomainsWithProgramIDParams struct {
	ProgramID int64 `json:"program_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) FindSubdomainsWithProgramID(ctx context.Context, arg FindSubdomainsWithProgramIDParams) ([]Subdomain, error) {
	rows, err := q.db.Query(ctx, findSubdomainsWithProgramID, arg.ProgramID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subdomain{}
	for rows.Next() {
		var i Subdomain
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Subdomain,
			&i.Tag,
			&i.Ip,
			&i.Title,
			&i.BodyHash,
			&i.StatusCode,
			&i.ContentLength,
			&i.Screenshot,
			&i.Favourite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSubdomainsWithSearch = `-- name: FindSubdomainsWithSearch :many
SELECT id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at FROM subdomain WHERE subdomain LIKE $1 LIMIT $2 OFFSET $3
`

type FindSubdomainsWithSearchParams struct {
	Subdomain string `json:"subdomain"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) FindSubdomainsWithSearch(ctx context.Context, arg FindSubdomainsWithSearchParams) ([]Subdomain, error) {
	rows, err := q.db.Query(ctx, findSubdomainsWithSearch, arg.Subdomain, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subdomain{}
	for rows.Next() {
		var i Subdomain
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Subdomain,
			&i.Tag,
			&i.Ip,
			&i.Title,
			&i.BodyHash,
			&i.StatusCode,
			&i.ContentLength,
			&i.Screenshot,
			&i.Favourite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSubdomainsWithSearchAndProgramID = `-- name: FindSubdomainsWithSearchAndProgramID :many
SELECT id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at FROM subdomain WHERE subdomain LIKE $1 AND program_id = $2 LIMIT $3 OFFSET $4
`

type FindSubdomainsWithSearchAndProgramIDParams struct {
	Subdomain string `json:"subdomain"`
	ProgramID int64  `json:"program_id"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) FindSubdomainsWithSearchAndProgramID(ctx context.Context, arg FindSubdomainsWithSearchAndProgramIDParams) ([]Subdomain, error) {
	rows, err := q.db.Query(ctx, findSubdomainsWithSearchAndProgramID,
		arg.Subdomain,
		arg.ProgramID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subdomain{}
	for rows.Next() {
		var i Subdomain
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.Subdomain,
			&i.Tag,
			&i.Ip,
			&i.Title,
			&i.BodyHash,
			&i.StatusCode,
			&i.ContentLength,
			&i.Screenshot,
			&i.Favourite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubdomain = `-- name: UpdateSubdomain :one
UPDATE subdomain SET program_id = $2, subdomain = $3, title = $4, body_hash = $5, status_code = $6, content_length = $7, tag = $8, ip = $9, screenshot = $10, updated_at = NOW() WHERE id = $1 RETURNING id, program_id, subdomain, tag, ip, title, body_hash, status_code, content_length, screenshot, favourite, created_at, updated_at
`

type UpdateSubdomainParams struct {
	ID            int64   `json:"id"`
	ProgramID     int64   `json:"program_id"`
	Subdomain     string  `json:"subdomain"`
	Title         *string `json:"title"`
	BodyHash      *string `json:"body_hash"`
	StatusCode    *int32  `json:"status_code"`
	ContentLength *int32  `json:"content_length"`
	Tag           *string `json:"tag"`
	Ip            *int64  `json:"ip"`
	Screenshot    *string `json:"screenshot"`
}

func (q *Queries) UpdateSubdomain(ctx context.Context, arg UpdateSubdomainParams) (Subdomain, error) {
	row := q.db.QueryRow(ctx, updateSubdomain,
		arg.ID,
		arg.ProgramID,
		arg.Subdomain,
		arg.Title,
		arg.BodyHash,
		arg.StatusCode,
		arg.ContentLength,
		arg.Tag,
		arg.Ip,
		arg.Screenshot,
	)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.Subdomain,
		&i.Tag,
		&i.Ip,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.ContentLength,
		&i.Screenshot,
		&i.Favourite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
