// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: technologies.sql

package db

import (
	"context"
)

const addTechnologieSubdomain = `-- name: AddTechnologieSubdomain :one
INSERT INTO technologie_subdomain (technology_version, subdomain_id) VALUES ($1, $2) RETURNING id, technology_version, subdomain_id, created_at, updated_at
`

type AddTechnologieSubdomainParams struct {
	TechnologyVersion int64 `json:"technology_version"`
	SubdomainID       int64 `json:"subdomain_id"`
}

func (q *Queries) AddTechnologieSubdomain(ctx context.Context, arg AddTechnologieSubdomainParams) (TechnologieSubdomain, error) {
	row := q.db.QueryRow(ctx, addTechnologieSubdomain, arg.TechnologyVersion, arg.SubdomainID)
	var i TechnologieSubdomain
	err := row.Scan(
		&i.ID,
		&i.TechnologyVersion,
		&i.SubdomainID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addTechnologieVersion = `-- name: AddTechnologieVersion :one
INSERT INTO technologie_version (technology_id, version) VALUES ($1, $2) RETURNING id, technology_id, version, created_at, updated_at
`

type AddTechnologieVersionParams struct {
	TechnologyID int64  `json:"technology_id"`
	Version      string `json:"version"`
}

func (q *Queries) AddTechnologieVersion(ctx context.Context, arg AddTechnologieVersionParams) (TechnologieVersion, error) {
	row := q.db.QueryRow(ctx, addTechnologieVersion, arg.TechnologyID, arg.Version)
	var i TechnologieVersion
	err := row.Scan(
		&i.ID,
		&i.TechnologyID,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countTechnologies = `-- name: CountTechnologies :one
SELECT COUNT(*) FROM technologies
`

func (q *Queries) CountTechnologies(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTechnologies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTechnologiesVersion = `-- name: CountTechnologiesVersion :one
SELECT COUNT(*) FROM technologie_version WHERE technology_id = $1
`

func (q *Queries) CountTechnologiesVersion(ctx context.Context, technologyID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countTechnologiesVersion, technologyID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTechnologie = `-- name: CreateTechnologie :one
INSERT INTO technologies (name) VALUES ($1) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateTechnologie(ctx context.Context, name string) (Technology, error) {
	row := q.db.QueryRow(ctx, createTechnologie, name)
	var i Technology
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTechnologieByIDs = `-- name: DeleteTechnologieByIDs :exec
DELETE FROM technologies WHERE id = $1
`

func (q *Queries) DeleteTechnologieByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTechnologieByIDs, id)
	return err
}

const findAllTechnologies = `-- name: FindAllTechnologies :many
SELECT id, name, created_at, updated_at FROM technologies
`

func (q *Queries) FindAllTechnologies(ctx context.Context) ([]Technology, error) {
	rows, err := q.db.Query(ctx, findAllTechnologies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Technology{}
	for rows.Next() {
		var i Technology
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTechnologieByIDs = `-- name: FindTechnologieByIDs :one
SELECT id, name, created_at, updated_at FROM technologies WHERE id = $1 LIMIT 1
`

func (q *Queries) FindTechnologieByIDs(ctx context.Context, id int64) (Technology, error) {
	row := q.db.QueryRow(ctx, findTechnologieByIDs, id)
	var i Technology
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findTechnologieByName = `-- name: FindTechnologieByName :one
SELECT id, name, created_at, updated_at FROM technologies WHERE name = $1 LIMIT 1
`

func (q *Queries) FindTechnologieByName(ctx context.Context, name string) (Technology, error) {
	row := q.db.QueryRow(ctx, findTechnologieByName, name)
	var i Technology
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findTechnologieVersionsByIDs = `-- name: FindTechnologieVersionsByIDs :many
SELECT id, technology_id, version, created_at, updated_at FROM technologie_version WHERE technology_id = $1
`

func (q *Queries) FindTechnologieVersionsByIDs(ctx context.Context, technologyID int64) ([]TechnologieVersion, error) {
	rows, err := q.db.Query(ctx, findTechnologieVersionsByIDs, technologyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TechnologieVersion{}
	for rows.Next() {
		var i TechnologieVersion
		if err := rows.Scan(
			&i.ID,
			&i.TechnologyID,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTechnologiesBySubdomain = `-- name: FindTechnologiesBySubdomain :many
SELECT id, name, created_at, updated_at FROM technologies WHERE id IN (SELECT technology_id FROM technologie_subdomain WHERE subdomain_id = $1)
`

func (q *Queries) FindTechnologiesBySubdomain(ctx context.Context, subdomainID int64) ([]Technology, error) {
	rows, err := q.db.Query(ctx, findTechnologiesBySubdomain, subdomainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Technology{}
	for rows.Next() {
		var i Technology
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTechnologie = `-- name: UpdateTechnologie :one
UPDATE technologies SET name = $2, updated_at = NOW() WHERE id = $1 RETURNING id, name, created_at, updated_at
`

type UpdateTechnologieParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTechnologie(ctx context.Context, arg UpdateTechnologieParams) (Technology, error) {
	row := q.db.QueryRow(ctx, updateTechnologie, arg.ID, arg.Name)
	var i Technology
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
