// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: vulnerability.sql

package db

import (
	"context"
)

const createVulnerability = `-- name: CreateVulnerability :one
INSERT INTO vulnerabilities (program_id, severity, type) VALUES ($1, $2, $3) RETURNING id, program_id, url_id, tag, type, severity, created_at, updated_at
`

type CreateVulnerabilityParams struct {
	ProgramID int64  `json:"program_id"`
	Severity  string `json:"severity"`
	Type      string `json:"type"`
}

func (q *Queries) CreateVulnerability(ctx context.Context, arg CreateVulnerabilityParams) (Vulnerability, error) {
	row := q.db.QueryRow(ctx, createVulnerability, arg.ProgramID, arg.Severity, arg.Type)
	var i Vulnerability
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.UrlID,
		&i.Tag,
		&i.Type,
		&i.Severity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVulnerabilityByIDs = `-- name: DeleteVulnerabilityByIDs :exec
DELETE FROM vulnerabilities WHERE id = $1
`

func (q *Queries) DeleteVulnerabilityByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVulnerabilityByIDs, id)
	return err
}

const findVulnerabilityByIDs = `-- name: FindVulnerabilityByIDs :one
SELECT id, program_id, url_id, tag, type, severity, created_at, updated_at FROM vulnerabilities WHERE id = $1 LIMIT 1
`

func (q *Queries) FindVulnerabilityByIDs(ctx context.Context, id int64) (Vulnerability, error) {
	row := q.db.QueryRow(ctx, findVulnerabilityByIDs, id)
	var i Vulnerability
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.UrlID,
		&i.Tag,
		&i.Type,
		&i.Severity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findVulnerabilitys = `-- name: FindVulnerabilitys :many
SELECT id, program_id, url_id, tag, type, severity, created_at, updated_at FROM vulnerabilities
`

func (q *Queries) FindVulnerabilitys(ctx context.Context) ([]Vulnerability, error) {
	rows, err := q.db.Query(ctx, findVulnerabilitys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vulnerability{}
	for rows.Next() {
		var i Vulnerability
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.UrlID,
			&i.Tag,
			&i.Type,
			&i.Severity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVulnerability = `-- name: UpdateVulnerability :one
UPDATE vulnerabilities SET program_id = $2, severity = $3, type = $4, updated_at = NOW() WHERE id = $1 RETURNING id, program_id, url_id, tag, type, severity, created_at, updated_at
`

type UpdateVulnerabilityParams struct {
	ID        int64  `json:"id"`
	ProgramID int64  `json:"program_id"`
	Severity  string `json:"severity"`
	Type      string `json:"type"`
}

func (q *Queries) UpdateVulnerability(ctx context.Context, arg UpdateVulnerabilityParams) (Vulnerability, error) {
	row := q.db.QueryRow(ctx, updateVulnerability,
		arg.ID,
		arg.ProgramID,
		arg.Severity,
		arg.Type,
	)
	var i Vulnerability
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.UrlID,
		&i.Tag,
		&i.Type,
		&i.Severity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
