// Code generated by MockGen. DO NOT EDIT.
// Source: db/wrapper/wrapper.go

// Package wrapper is a generated GoMock package.
package wrapper

import (
	context "context"
	reflect "reflect"

	db "github.com/aituglo/rubyx-dashboard/golang/db"
	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddSetting mocks base method.
func (m *MockQuerier) AddSetting(ctx context.Context, arg db.AddSettingParams) (db.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSetting", ctx, arg)
	ret0, _ := ret[0].(db.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSetting indicates an expected call of AddSetting.
func (mr *MockQuerierMockRecorder) AddSetting(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSetting", reflect.TypeOf((*MockQuerier)(nil).AddSetting), ctx, arg)
}

// CountIps mocks base method.
func (m *MockQuerier) CountIps(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountIps", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountIps indicates an expected call of CountIps.
func (mr *MockQuerierMockRecorder) CountIps(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountIps", reflect.TypeOf((*MockQuerier)(nil).CountIps), ctx)
}

// CountParams mocks base method.
func (m *MockQuerier) CountParams(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountParams", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountParams indicates an expected call of CountParams.
func (mr *MockQuerierMockRecorder) CountParams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountParams", reflect.TypeOf((*MockQuerier)(nil).CountParams), ctx)
}

// CountPorts mocks base method.
func (m *MockQuerier) CountPorts(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPorts", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPorts indicates an expected call of CountPorts.
func (mr *MockQuerierMockRecorder) CountPorts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPorts", reflect.TypeOf((*MockQuerier)(nil).CountPorts), ctx)
}

// CountPrograms mocks base method.
func (m *MockQuerier) CountPrograms(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPrograms", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPrograms indicates an expected call of CountPrograms.
func (mr *MockQuerierMockRecorder) CountPrograms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPrograms", reflect.TypeOf((*MockQuerier)(nil).CountPrograms), ctx)
}

// CountProgramsWithPlatform mocks base method.
func (m *MockQuerier) CountProgramsWithPlatform(ctx context.Context, platformID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProgramsWithPlatform", ctx, platformID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProgramsWithPlatform indicates an expected call of CountProgramsWithPlatform.
func (mr *MockQuerierMockRecorder) CountProgramsWithPlatform(ctx, platformID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProgramsWithPlatform", reflect.TypeOf((*MockQuerier)(nil).CountProgramsWithPlatform), ctx, platformID)
}

// CountProgramsWithSearch mocks base method.
func (m *MockQuerier) CountProgramsWithSearch(ctx context.Context, name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProgramsWithSearch", ctx, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProgramsWithSearch indicates an expected call of CountProgramsWithSearch.
func (mr *MockQuerierMockRecorder) CountProgramsWithSearch(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProgramsWithSearch", reflect.TypeOf((*MockQuerier)(nil).CountProgramsWithSearch), ctx, name)
}

// CountProgramsWithSearchAndPlatform mocks base method.
func (m *MockQuerier) CountProgramsWithSearchAndPlatform(ctx context.Context, arg db.CountProgramsWithSearchAndPlatformParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProgramsWithSearchAndPlatform", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProgramsWithSearchAndPlatform indicates an expected call of CountProgramsWithSearchAndPlatform.
func (mr *MockQuerierMockRecorder) CountProgramsWithSearchAndPlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProgramsWithSearchAndPlatform", reflect.TypeOf((*MockQuerier)(nil).CountProgramsWithSearchAndPlatform), ctx, arg)
}

// CountProgramsWithSearchAndType mocks base method.
func (m *MockQuerier) CountProgramsWithSearchAndType(ctx context.Context, arg db.CountProgramsWithSearchAndTypeParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProgramsWithSearchAndType", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProgramsWithSearchAndType indicates an expected call of CountProgramsWithSearchAndType.
func (mr *MockQuerierMockRecorder) CountProgramsWithSearchAndType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProgramsWithSearchAndType", reflect.TypeOf((*MockQuerier)(nil).CountProgramsWithSearchAndType), ctx, arg)
}

// CountProgramsWithSearchAndTypeAndPlatform mocks base method.
func (m *MockQuerier) CountProgramsWithSearchAndTypeAndPlatform(ctx context.Context, arg db.CountProgramsWithSearchAndTypeAndPlatformParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProgramsWithSearchAndTypeAndPlatform", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProgramsWithSearchAndTypeAndPlatform indicates an expected call of CountProgramsWithSearchAndTypeAndPlatform.
func (mr *MockQuerierMockRecorder) CountProgramsWithSearchAndTypeAndPlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProgramsWithSearchAndTypeAndPlatform", reflect.TypeOf((*MockQuerier)(nil).CountProgramsWithSearchAndTypeAndPlatform), ctx, arg)
}

// CountProgramsWithType mocks base method.
func (m *MockQuerier) CountProgramsWithType(ctx context.Context, dollar_1 db.ProgramType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProgramsWithType", ctx, dollar_1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProgramsWithType indicates an expected call of CountProgramsWithType.
func (mr *MockQuerierMockRecorder) CountProgramsWithType(ctx, dollar_1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProgramsWithType", reflect.TypeOf((*MockQuerier)(nil).CountProgramsWithType), ctx, dollar_1)
}

// CountProgramsWithTypeAndPlatform mocks base method.
func (m *MockQuerier) CountProgramsWithTypeAndPlatform(ctx context.Context, arg db.CountProgramsWithTypeAndPlatformParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProgramsWithTypeAndPlatform", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProgramsWithTypeAndPlatform indicates an expected call of CountProgramsWithTypeAndPlatform.
func (mr *MockQuerierMockRecorder) CountProgramsWithTypeAndPlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProgramsWithTypeAndPlatform", reflect.TypeOf((*MockQuerier)(nil).CountProgramsWithTypeAndPlatform), ctx, arg)
}

// CountScreenshots mocks base method.
func (m *MockQuerier) CountScreenshots(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountScreenshots", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountScreenshots indicates an expected call of CountScreenshots.
func (mr *MockQuerierMockRecorder) CountScreenshots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountScreenshots", reflect.TypeOf((*MockQuerier)(nil).CountScreenshots), ctx)
}

// CountSubdomains mocks base method.
func (m *MockQuerier) CountSubdomains(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubdomains", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubdomains indicates an expected call of CountSubdomains.
func (mr *MockQuerierMockRecorder) CountSubdomains(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubdomains", reflect.TypeOf((*MockQuerier)(nil).CountSubdomains), ctx)
}

// CountSubdomainsWithProgramID mocks base method.
func (m *MockQuerier) CountSubdomainsWithProgramID(ctx context.Context, programID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubdomainsWithProgramID", ctx, programID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubdomainsWithProgramID indicates an expected call of CountSubdomainsWithProgramID.
func (mr *MockQuerierMockRecorder) CountSubdomainsWithProgramID(ctx, programID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubdomainsWithProgramID", reflect.TypeOf((*MockQuerier)(nil).CountSubdomainsWithProgramID), ctx, programID)
}

// CountSubdomainsWithSearch mocks base method.
func (m *MockQuerier) CountSubdomainsWithSearch(ctx context.Context, subdomain string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubdomainsWithSearch", ctx, subdomain)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubdomainsWithSearch indicates an expected call of CountSubdomainsWithSearch.
func (mr *MockQuerierMockRecorder) CountSubdomainsWithSearch(ctx, subdomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubdomainsWithSearch", reflect.TypeOf((*MockQuerier)(nil).CountSubdomainsWithSearch), ctx, subdomain)
}

// CountSubdomainsWithSearchAndProgramID mocks base method.
func (m *MockQuerier) CountSubdomainsWithSearchAndProgramID(ctx context.Context, arg db.CountSubdomainsWithSearchAndProgramIDParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubdomainsWithSearchAndProgramID", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubdomainsWithSearchAndProgramID indicates an expected call of CountSubdomainsWithSearchAndProgramID.
func (mr *MockQuerierMockRecorder) CountSubdomainsWithSearchAndProgramID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubdomainsWithSearchAndProgramID", reflect.TypeOf((*MockQuerier)(nil).CountSubdomainsWithSearchAndProgramID), ctx, arg)
}

// CountUrlsBySubdomain mocks base method.
func (m *MockQuerier) CountUrlsBySubdomain(ctx context.Context, subdomainID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUrlsBySubdomain", ctx, subdomainID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUrlsBySubdomain indicates an expected call of CountUrlsBySubdomain.
func (mr *MockQuerierMockRecorder) CountUrlsBySubdomain(ctx, subdomainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUrlsBySubdomain", reflect.TypeOf((*MockQuerier)(nil).CountUrlsBySubdomain), ctx, subdomainID)
}

// CountVulnerabilities mocks base method.
func (m *MockQuerier) CountVulnerabilities(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVulnerabilities", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVulnerabilities indicates an expected call of CountVulnerabilities.
func (mr *MockQuerierMockRecorder) CountVulnerabilities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVulnerabilities", reflect.TypeOf((*MockQuerier)(nil).CountVulnerabilities), ctx)
}

// CreateApi mocks base method.
func (m *MockQuerier) CreateApi(ctx context.Context, arg db.CreateApiParams) (db.Api, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApi", ctx, arg)
	ret0, _ := ret[0].(db.Api)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApi indicates an expected call of CreateApi.
func (mr *MockQuerierMockRecorder) CreateApi(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApi", reflect.TypeOf((*MockQuerier)(nil).CreateApi), ctx, arg)
}

// CreateIp mocks base method.
func (m *MockQuerier) CreateIp(ctx context.Context, arg db.CreateIpParams) (db.Ip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIp", ctx, arg)
	ret0, _ := ret[0].(db.Ip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIp indicates an expected call of CreateIp.
func (mr *MockQuerierMockRecorder) CreateIp(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIp", reflect.TypeOf((*MockQuerier)(nil).CreateIp), ctx, arg)
}

// CreateParam mocks base method.
func (m *MockQuerier) CreateParam(ctx context.Context, arg db.CreateParamParams) (db.Param, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParam", ctx, arg)
	ret0, _ := ret[0].(db.Param)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParam indicates an expected call of CreateParam.
func (mr *MockQuerierMockRecorder) CreateParam(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParam", reflect.TypeOf((*MockQuerier)(nil).CreateParam), ctx, arg)
}

// CreatePlatform mocks base method.
func (m *MockQuerier) CreatePlatform(ctx context.Context, arg db.CreatePlatformParams) (db.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatform", ctx, arg)
	ret0, _ := ret[0].(db.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatform indicates an expected call of CreatePlatform.
func (mr *MockQuerierMockRecorder) CreatePlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatform", reflect.TypeOf((*MockQuerier)(nil).CreatePlatform), ctx, arg)
}

// CreatePort mocks base method.
func (m *MockQuerier) CreatePort(ctx context.Context, arg db.CreatePortParams) (db.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePort", ctx, arg)
	ret0, _ := ret[0].(db.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePort indicates an expected call of CreatePort.
func (mr *MockQuerierMockRecorder) CreatePort(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePort", reflect.TypeOf((*MockQuerier)(nil).CreatePort), ctx, arg)
}

// CreateProgram mocks base method.
func (m *MockQuerier) CreateProgram(ctx context.Context, arg db.CreateProgramParams) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProgram", ctx, arg)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProgram indicates an expected call of CreateProgram.
func (mr *MockQuerierMockRecorder) CreateProgram(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgram", reflect.TypeOf((*MockQuerier)(nil).CreateProgram), ctx, arg)
}

// CreateReset mocks base method.
func (m *MockQuerier) CreateReset(ctx context.Context, arg db.CreateResetParams) (db.Reset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReset", ctx, arg)
	ret0, _ := ret[0].(db.Reset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReset indicates an expected call of CreateReset.
func (mr *MockQuerierMockRecorder) CreateReset(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReset", reflect.TypeOf((*MockQuerier)(nil).CreateReset), ctx, arg)
}

// CreateScope mocks base method.
func (m *MockQuerier) CreateScope(ctx context.Context, arg db.CreateScopeParams) (db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScope", ctx, arg)
	ret0, _ := ret[0].(db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScope indicates an expected call of CreateScope.
func (mr *MockQuerierMockRecorder) CreateScope(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockQuerier)(nil).CreateScope), ctx, arg)
}

// CreateScreenshot mocks base method.
func (m *MockQuerier) CreateScreenshot(ctx context.Context, arg db.CreateScreenshotParams) (db.Screenshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScreenshot", ctx, arg)
	ret0, _ := ret[0].(db.Screenshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScreenshot indicates an expected call of CreateScreenshot.
func (mr *MockQuerierMockRecorder) CreateScreenshot(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScreenshot", reflect.TypeOf((*MockQuerier)(nil).CreateScreenshot), ctx, arg)
}

// CreateStat mocks base method.
func (m *MockQuerier) CreateStat(ctx context.Context, arg db.CreateStatParams) (db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStat", ctx, arg)
	ret0, _ := ret[0].(db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStat indicates an expected call of CreateStat.
func (mr *MockQuerierMockRecorder) CreateStat(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStat", reflect.TypeOf((*MockQuerier)(nil).CreateStat), ctx, arg)
}

// CreateSubdomain mocks base method.
func (m *MockQuerier) CreateSubdomain(ctx context.Context, arg db.CreateSubdomainParams) (db.Subdomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubdomain", ctx, arg)
	ret0, _ := ret[0].(db.Subdomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubdomain indicates an expected call of CreateSubdomain.
func (mr *MockQuerierMockRecorder) CreateSubdomain(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubdomain", reflect.TypeOf((*MockQuerier)(nil).CreateSubdomain), ctx, arg)
}

// CreateTask mocks base method.
func (m *MockQuerier) CreateTask(ctx context.Context, arg db.CreateTaskParams) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, arg)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockQuerierMockRecorder) CreateTask(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockQuerier)(nil).CreateTask), ctx, arg)
}

// CreateUrl mocks base method.
func (m *MockQuerier) CreateUrl(ctx context.Context, arg db.CreateUrlParams) (db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUrl", ctx, arg)
	ret0, _ := ret[0].(db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUrl indicates an expected call of CreateUrl.
func (mr *MockQuerierMockRecorder) CreateUrl(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUrl", reflect.TypeOf((*MockQuerier)(nil).CreateUrl), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// CreateVulnerability mocks base method.
func (m *MockQuerier) CreateVulnerability(ctx context.Context, arg db.CreateVulnerabilityParams) (db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVulnerability", ctx, arg)
	ret0, _ := ret[0].(db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVulnerability indicates an expected call of CreateVulnerability.
func (mr *MockQuerierMockRecorder) CreateVulnerability(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVulnerability", reflect.TypeOf((*MockQuerier)(nil).CreateVulnerability), ctx, arg)
}

// DeleteApiByIDs mocks base method.
func (m *MockQuerier) DeleteApiByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiByIDs indicates an expected call of DeleteApiByIDs.
func (mr *MockQuerierMockRecorder) DeleteApiByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteApiByIDs), ctx, id)
}

// DeleteIpByIDs mocks base method.
func (m *MockQuerier) DeleteIpByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIpByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIpByIDs indicates an expected call of DeleteIpByIDs.
func (mr *MockQuerierMockRecorder) DeleteIpByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIpByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteIpByIDs), ctx, id)
}

// DeleteParamByIDs mocks base method.
func (m *MockQuerier) DeleteParamByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParamByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteParamByIDs indicates an expected call of DeleteParamByIDs.
func (mr *MockQuerierMockRecorder) DeleteParamByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParamByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteParamByIDs), ctx, id)
}

// DeletePlatformByIDs mocks base method.
func (m *MockQuerier) DeletePlatformByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlatformByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlatformByIDs indicates an expected call of DeletePlatformByIDs.
func (mr *MockQuerierMockRecorder) DeletePlatformByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatformByIDs", reflect.TypeOf((*MockQuerier)(nil).DeletePlatformByIDs), ctx, id)
}

// DeletePortByIDs mocks base method.
func (m *MockQuerier) DeletePortByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortByIDs indicates an expected call of DeletePortByIDs.
func (mr *MockQuerierMockRecorder) DeletePortByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortByIDs", reflect.TypeOf((*MockQuerier)(nil).DeletePortByIDs), ctx, id)
}

// DeleteProgramByIDs mocks base method.
func (m *MockQuerier) DeleteProgramByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProgramByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProgramByIDs indicates an expected call of DeleteProgramByIDs.
func (mr *MockQuerierMockRecorder) DeleteProgramByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgramByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteProgramByIDs), ctx, id)
}

// DeleteResetsForUser mocks base method.
func (m *MockQuerier) DeleteResetsForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResetsForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResetsForUser indicates an expected call of DeleteResetsForUser.
func (mr *MockQuerierMockRecorder) DeleteResetsForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResetsForUser", reflect.TypeOf((*MockQuerier)(nil).DeleteResetsForUser), ctx, userID)
}

// DeleteScopeByID mocks base method.
func (m *MockQuerier) DeleteScopeByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScopeByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScopeByID indicates an expected call of DeleteScopeByID.
func (mr *MockQuerierMockRecorder) DeleteScopeByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScopeByID", reflect.TypeOf((*MockQuerier)(nil).DeleteScopeByID), ctx, id)
}

// DeleteScreenshotByIDs mocks base method.
func (m *MockQuerier) DeleteScreenshotByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScreenshotByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScreenshotByIDs indicates an expected call of DeleteScreenshotByIDs.
func (mr *MockQuerierMockRecorder) DeleteScreenshotByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScreenshotByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteScreenshotByIDs), ctx, id)
}

// DeleteStatByID mocks base method.
func (m *MockQuerier) DeleteStatByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatByID indicates an expected call of DeleteStatByID.
func (mr *MockQuerierMockRecorder) DeleteStatByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatByID", reflect.TypeOf((*MockQuerier)(nil).DeleteStatByID), ctx, id)
}

// DeleteSubdomainByIDs mocks base method.
func (m *MockQuerier) DeleteSubdomainByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubdomainByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubdomainByIDs indicates an expected call of DeleteSubdomainByIDs.
func (mr *MockQuerierMockRecorder) DeleteSubdomainByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubdomainByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteSubdomainByIDs), ctx, id)
}

// DeleteTaskByIDs mocks base method.
func (m *MockQuerier) DeleteTaskByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskByIDs indicates an expected call of DeleteTaskByIDs.
func (mr *MockQuerierMockRecorder) DeleteTaskByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteTaskByIDs), ctx, id)
}

// DeleteUrlByIDs mocks base method.
func (m *MockQuerier) DeleteUrlByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUrlByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUrlByIDs indicates an expected call of DeleteUrlByIDs.
func (mr *MockQuerierMockRecorder) DeleteUrlByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUrlByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteUrlByIDs), ctx, id)
}

// DeleteVulnerabilityByIDs mocks base method.
func (m *MockQuerier) DeleteVulnerabilityByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVulnerabilityByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVulnerabilityByIDs indicates an expected call of DeleteVulnerabilityByIDs.
func (mr *MockQuerierMockRecorder) DeleteVulnerabilityByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVulnerabilityByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteVulnerabilityByIDs), ctx, id)
}

// FavouriteSubdomain mocks base method.
func (m *MockQuerier) FavouriteSubdomain(ctx context.Context, arg db.FavouriteSubdomainParams) (db.Subdomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavouriteSubdomain", ctx, arg)
	ret0, _ := ret[0].(db.Subdomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavouriteSubdomain indicates an expected call of FavouriteSubdomain.
func (mr *MockQuerierMockRecorder) FavouriteSubdomain(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavouriteSubdomain", reflect.TypeOf((*MockQuerier)(nil).FavouriteSubdomain), ctx, arg)
}

// FavouriteUrl mocks base method.
func (m *MockQuerier) FavouriteUrl(ctx context.Context, arg db.FavouriteUrlParams) (db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavouriteUrl", ctx, arg)
	ret0, _ := ret[0].(db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavouriteUrl indicates an expected call of FavouriteUrl.
func (mr *MockQuerierMockRecorder) FavouriteUrl(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavouriteUrl", reflect.TypeOf((*MockQuerier)(nil).FavouriteUrl), ctx, arg)
}

// FavouriteVulnerability mocks base method.
func (m *MockQuerier) FavouriteVulnerability(ctx context.Context, arg db.FavouriteVulnerabilityParams) (db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavouriteVulnerability", ctx, arg)
	ret0, _ := ret[0].(db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavouriteVulnerability indicates an expected call of FavouriteVulnerability.
func (mr *MockQuerierMockRecorder) FavouriteVulnerability(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavouriteVulnerability", reflect.TypeOf((*MockQuerier)(nil).FavouriteVulnerability), ctx, arg)
}

// FindAllPrograms mocks base method.
func (m *MockQuerier) FindAllPrograms(ctx context.Context) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPrograms", ctx)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPrograms indicates an expected call of FindAllPrograms.
func (mr *MockQuerierMockRecorder) FindAllPrograms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPrograms", reflect.TypeOf((*MockQuerier)(nil).FindAllPrograms), ctx)
}

// FindApiByIDs mocks base method.
func (m *MockQuerier) FindApiByIDs(ctx context.Context, id int64) (db.Api, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindApiByIDs", ctx, id)
	ret0, _ := ret[0].(db.Api)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindApiByIDs indicates an expected call of FindApiByIDs.
func (mr *MockQuerierMockRecorder) FindApiByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindApiByIDs", reflect.TypeOf((*MockQuerier)(nil).FindApiByIDs), ctx, id)
}

// FindApis mocks base method.
func (m *MockQuerier) FindApis(ctx context.Context) ([]db.Api, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindApis", ctx)
	ret0, _ := ret[0].([]db.Api)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindApis indicates an expected call of FindApis.
func (mr *MockQuerierMockRecorder) FindApis(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindApis", reflect.TypeOf((*MockQuerier)(nil).FindApis), ctx)
}

// FindIpByIDs mocks base method.
func (m *MockQuerier) FindIpByIDs(ctx context.Context, id int64) (db.Ip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIpByIDs", ctx, id)
	ret0, _ := ret[0].(db.Ip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIpByIDs indicates an expected call of FindIpByIDs.
func (mr *MockQuerierMockRecorder) FindIpByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIpByIDs", reflect.TypeOf((*MockQuerier)(nil).FindIpByIDs), ctx, id)
}

// FindIps mocks base method.
func (m *MockQuerier) FindIps(ctx context.Context, arg db.FindIpsParams) ([]db.Ip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIps", ctx, arg)
	ret0, _ := ret[0].([]db.Ip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIps indicates an expected call of FindIps.
func (mr *MockQuerierMockRecorder) FindIps(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIps", reflect.TypeOf((*MockQuerier)(nil).FindIps), ctx, arg)
}

// FindIpsWithIp mocks base method.
func (m *MockQuerier) FindIpsWithIp(ctx context.Context, arg db.FindIpsWithIpParams) ([]db.Ip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIpsWithIp", ctx, arg)
	ret0, _ := ret[0].([]db.Ip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIpsWithIp indicates an expected call of FindIpsWithIp.
func (mr *MockQuerierMockRecorder) FindIpsWithIp(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIpsWithIp", reflect.TypeOf((*MockQuerier)(nil).FindIpsWithIp), ctx, arg)
}

// FindIpsWithProgramID mocks base method.
func (m *MockQuerier) FindIpsWithProgramID(ctx context.Context, arg db.FindIpsWithProgramIDParams) ([]db.Ip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIpsWithProgramID", ctx, arg)
	ret0, _ := ret[0].([]db.Ip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIpsWithProgramID indicates an expected call of FindIpsWithProgramID.
func (mr *MockQuerierMockRecorder) FindIpsWithProgramID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIpsWithProgramID", reflect.TypeOf((*MockQuerier)(nil).FindIpsWithProgramID), ctx, arg)
}

// FindIpsWithSubdomainID mocks base method.
func (m *MockQuerier) FindIpsWithSubdomainID(ctx context.Context, arg db.FindIpsWithSubdomainIDParams) ([]db.Ip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIpsWithSubdomainID", ctx, arg)
	ret0, _ := ret[0].([]db.Ip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIpsWithSubdomainID indicates an expected call of FindIpsWithSubdomainID.
func (mr *MockQuerierMockRecorder) FindIpsWithSubdomainID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIpsWithSubdomainID", reflect.TypeOf((*MockQuerier)(nil).FindIpsWithSubdomainID), ctx, arg)
}

// FindParamByIDs mocks base method.
func (m *MockQuerier) FindParamByIDs(ctx context.Context, id int64) (db.Param, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindParamByIDs", ctx, id)
	ret0, _ := ret[0].(db.Param)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindParamByIDs indicates an expected call of FindParamByIDs.
func (mr *MockQuerierMockRecorder) FindParamByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindParamByIDs", reflect.TypeOf((*MockQuerier)(nil).FindParamByIDs), ctx, id)
}

// FindParams mocks base method.
func (m *MockQuerier) FindParams(ctx context.Context, arg db.FindParamsParams) ([]db.Param, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindParams", ctx, arg)
	ret0, _ := ret[0].([]db.Param)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindParams indicates an expected call of FindParams.
func (mr *MockQuerierMockRecorder) FindParams(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindParams", reflect.TypeOf((*MockQuerier)(nil).FindParams), ctx, arg)
}

// FindParamsWithParam mocks base method.
func (m *MockQuerier) FindParamsWithParam(ctx context.Context, arg db.FindParamsWithParamParams) ([]db.Param, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindParamsWithParam", ctx, arg)
	ret0, _ := ret[0].([]db.Param)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindParamsWithParam indicates an expected call of FindParamsWithParam.
func (mr *MockQuerierMockRecorder) FindParamsWithParam(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindParamsWithParam", reflect.TypeOf((*MockQuerier)(nil).FindParamsWithParam), ctx, arg)
}

// FindParamsWithUrlID mocks base method.
func (m *MockQuerier) FindParamsWithUrlID(ctx context.Context, arg db.FindParamsWithUrlIDParams) ([]db.Param, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindParamsWithUrlID", ctx, arg)
	ret0, _ := ret[0].([]db.Param)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindParamsWithUrlID indicates an expected call of FindParamsWithUrlID.
func (mr *MockQuerierMockRecorder) FindParamsWithUrlID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindParamsWithUrlID", reflect.TypeOf((*MockQuerier)(nil).FindParamsWithUrlID), ctx, arg)
}

// FindPlatformByIDs mocks base method.
func (m *MockQuerier) FindPlatformByIDs(ctx context.Context, id int64) (db.FindPlatformByIDsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlatformByIDs", ctx, id)
	ret0, _ := ret[0].(db.FindPlatformByIDsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlatformByIDs indicates an expected call of FindPlatformByIDs.
func (mr *MockQuerierMockRecorder) FindPlatformByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlatformByIDs", reflect.TypeOf((*MockQuerier)(nil).FindPlatformByIDs), ctx, id)
}

// FindPlatforms mocks base method.
func (m *MockQuerier) FindPlatforms(ctx context.Context) ([]db.FindPlatformsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlatforms", ctx)
	ret0, _ := ret[0].([]db.FindPlatformsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlatforms indicates an expected call of FindPlatforms.
func (mr *MockQuerierMockRecorder) FindPlatforms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlatforms", reflect.TypeOf((*MockQuerier)(nil).FindPlatforms), ctx)
}

// FindPortByIDs mocks base method.
func (m *MockQuerier) FindPortByIDs(ctx context.Context, id int64) (db.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPortByIDs", ctx, id)
	ret0, _ := ret[0].(db.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPortByIDs indicates an expected call of FindPortByIDs.
func (mr *MockQuerierMockRecorder) FindPortByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPortByIDs", reflect.TypeOf((*MockQuerier)(nil).FindPortByIDs), ctx, id)
}

// FindPorts mocks base method.
func (m *MockQuerier) FindPorts(ctx context.Context, arg db.FindPortsParams) ([]db.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPorts", ctx, arg)
	ret0, _ := ret[0].([]db.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPorts indicates an expected call of FindPorts.
func (mr *MockQuerierMockRecorder) FindPorts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPorts", reflect.TypeOf((*MockQuerier)(nil).FindPorts), ctx, arg)
}

// FindPortsWithIpID mocks base method.
func (m *MockQuerier) FindPortsWithIpID(ctx context.Context, arg db.FindPortsWithIpIDParams) ([]db.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPortsWithIpID", ctx, arg)
	ret0, _ := ret[0].([]db.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPortsWithIpID indicates an expected call of FindPortsWithIpID.
func (mr *MockQuerierMockRecorder) FindPortsWithIpID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPortsWithIpID", reflect.TypeOf((*MockQuerier)(nil).FindPortsWithIpID), ctx, arg)
}

// FindPortsWithPort mocks base method.
func (m *MockQuerier) FindPortsWithPort(ctx context.Context, arg db.FindPortsWithPortParams) ([]db.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPortsWithPort", ctx, arg)
	ret0, _ := ret[0].([]db.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPortsWithPort indicates an expected call of FindPortsWithPort.
func (mr *MockQuerierMockRecorder) FindPortsWithPort(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPortsWithPort", reflect.TypeOf((*MockQuerier)(nil).FindPortsWithPort), ctx, arg)
}

// FindProgramByIDs mocks base method.
func (m *MockQuerier) FindProgramByIDs(ctx context.Context, id int64) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramByIDs", ctx, id)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramByIDs indicates an expected call of FindProgramByIDs.
func (mr *MockQuerierMockRecorder) FindProgramByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramByIDs", reflect.TypeOf((*MockQuerier)(nil).FindProgramByIDs), ctx, id)
}

// FindProgramByScope mocks base method.
func (m *MockQuerier) FindProgramByScope(ctx context.Context, scope string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramByScope", ctx, scope)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramByScope indicates an expected call of FindProgramByScope.
func (mr *MockQuerierMockRecorder) FindProgramByScope(ctx, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramByScope", reflect.TypeOf((*MockQuerier)(nil).FindProgramByScope), ctx, scope)
}

// FindProgramBySlug mocks base method.
func (m *MockQuerier) FindProgramBySlug(ctx context.Context, slug string) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramBySlug", ctx, slug)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramBySlug indicates an expected call of FindProgramBySlug.
func (mr *MockQuerierMockRecorder) FindProgramBySlug(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramBySlug", reflect.TypeOf((*MockQuerier)(nil).FindProgramBySlug), ctx, slug)
}

// FindPrograms mocks base method.
func (m *MockQuerier) FindPrograms(ctx context.Context, arg db.FindProgramsParams) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrograms", ctx, arg)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrograms indicates an expected call of FindPrograms.
func (mr *MockQuerierMockRecorder) FindPrograms(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrograms", reflect.TypeOf((*MockQuerier)(nil).FindPrograms), ctx, arg)
}

// FindProgramsWithPlatform mocks base method.
func (m *MockQuerier) FindProgramsWithPlatform(ctx context.Context, arg db.FindProgramsWithPlatformParams) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramsWithPlatform", ctx, arg)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramsWithPlatform indicates an expected call of FindProgramsWithPlatform.
func (mr *MockQuerierMockRecorder) FindProgramsWithPlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramsWithPlatform", reflect.TypeOf((*MockQuerier)(nil).FindProgramsWithPlatform), ctx, arg)
}

// FindProgramsWithSearch mocks base method.
func (m *MockQuerier) FindProgramsWithSearch(ctx context.Context, arg db.FindProgramsWithSearchParams) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramsWithSearch", ctx, arg)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramsWithSearch indicates an expected call of FindProgramsWithSearch.
func (mr *MockQuerierMockRecorder) FindProgramsWithSearch(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramsWithSearch", reflect.TypeOf((*MockQuerier)(nil).FindProgramsWithSearch), ctx, arg)
}

// FindProgramsWithSearchAndPlatform mocks base method.
func (m *MockQuerier) FindProgramsWithSearchAndPlatform(ctx context.Context, arg db.FindProgramsWithSearchAndPlatformParams) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramsWithSearchAndPlatform", ctx, arg)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramsWithSearchAndPlatform indicates an expected call of FindProgramsWithSearchAndPlatform.
func (mr *MockQuerierMockRecorder) FindProgramsWithSearchAndPlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramsWithSearchAndPlatform", reflect.TypeOf((*MockQuerier)(nil).FindProgramsWithSearchAndPlatform), ctx, arg)
}

// FindProgramsWithSearchAndType mocks base method.
func (m *MockQuerier) FindProgramsWithSearchAndType(ctx context.Context, arg db.FindProgramsWithSearchAndTypeParams) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramsWithSearchAndType", ctx, arg)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramsWithSearchAndType indicates an expected call of FindProgramsWithSearchAndType.
func (mr *MockQuerierMockRecorder) FindProgramsWithSearchAndType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramsWithSearchAndType", reflect.TypeOf((*MockQuerier)(nil).FindProgramsWithSearchAndType), ctx, arg)
}

// FindProgramsWithSearchAndTypeAndPlatform mocks base method.
func (m *MockQuerier) FindProgramsWithSearchAndTypeAndPlatform(ctx context.Context, arg db.FindProgramsWithSearchAndTypeAndPlatformParams) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramsWithSearchAndTypeAndPlatform", ctx, arg)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramsWithSearchAndTypeAndPlatform indicates an expected call of FindProgramsWithSearchAndTypeAndPlatform.
func (mr *MockQuerierMockRecorder) FindProgramsWithSearchAndTypeAndPlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramsWithSearchAndTypeAndPlatform", reflect.TypeOf((*MockQuerier)(nil).FindProgramsWithSearchAndTypeAndPlatform), ctx, arg)
}

// FindProgramsWithType mocks base method.
func (m *MockQuerier) FindProgramsWithType(ctx context.Context, arg db.FindProgramsWithTypeParams) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramsWithType", ctx, arg)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramsWithType indicates an expected call of FindProgramsWithType.
func (mr *MockQuerierMockRecorder) FindProgramsWithType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramsWithType", reflect.TypeOf((*MockQuerier)(nil).FindProgramsWithType), ctx, arg)
}

// FindProgramsWithTypeAndPlatform mocks base method.
func (m *MockQuerier) FindProgramsWithTypeAndPlatform(ctx context.Context, arg db.FindProgramsWithTypeAndPlatformParams) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramsWithTypeAndPlatform", ctx, arg)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramsWithTypeAndPlatform indicates an expected call of FindProgramsWithTypeAndPlatform.
func (mr *MockQuerierMockRecorder) FindProgramsWithTypeAndPlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramsWithTypeAndPlatform", reflect.TypeOf((*MockQuerier)(nil).FindProgramsWithTypeAndPlatform), ctx, arg)
}

// FindResetByCode mocks base method.
func (m *MockQuerier) FindResetByCode(ctx context.Context, code string) (db.Reset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindResetByCode", ctx, code)
	ret0, _ := ret[0].(db.Reset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindResetByCode indicates an expected call of FindResetByCode.
func (mr *MockQuerierMockRecorder) FindResetByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResetByCode", reflect.TypeOf((*MockQuerier)(nil).FindResetByCode), ctx, code)
}

// FindScopeByID mocks base method.
func (m *MockQuerier) FindScopeByID(ctx context.Context, id int64) (db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScopeByID", ctx, id)
	ret0, _ := ret[0].(db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScopeByID indicates an expected call of FindScopeByID.
func (mr *MockQuerierMockRecorder) FindScopeByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScopeByID", reflect.TypeOf((*MockQuerier)(nil).FindScopeByID), ctx, id)
}

// FindScopes mocks base method.
func (m *MockQuerier) FindScopes(ctx context.Context) ([]db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScopes", ctx)
	ret0, _ := ret[0].([]db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScopes indicates an expected call of FindScopes.
func (mr *MockQuerierMockRecorder) FindScopes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScopes", reflect.TypeOf((*MockQuerier)(nil).FindScopes), ctx)
}

// FindScopesByProgramID mocks base method.
func (m *MockQuerier) FindScopesByProgramID(ctx context.Context, programID int64) ([]db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScopesByProgramID", ctx, programID)
	ret0, _ := ret[0].([]db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScopesByProgramID indicates an expected call of FindScopesByProgramID.
func (mr *MockQuerierMockRecorder) FindScopesByProgramID(ctx, programID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScopesByProgramID", reflect.TypeOf((*MockQuerier)(nil).FindScopesByProgramID), ctx, programID)
}

// FindScreenshotByIDs mocks base method.
func (m *MockQuerier) FindScreenshotByIDs(ctx context.Context, id int64) (db.Screenshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScreenshotByIDs", ctx, id)
	ret0, _ := ret[0].(db.Screenshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScreenshotByIDs indicates an expected call of FindScreenshotByIDs.
func (mr *MockQuerierMockRecorder) FindScreenshotByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScreenshotByIDs", reflect.TypeOf((*MockQuerier)(nil).FindScreenshotByIDs), ctx, id)
}

// FindScreenshots mocks base method.
func (m *MockQuerier) FindScreenshots(ctx context.Context, arg db.FindScreenshotsParams) ([]db.Screenshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScreenshots", ctx, arg)
	ret0, _ := ret[0].([]db.Screenshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScreenshots indicates an expected call of FindScreenshots.
func (mr *MockQuerierMockRecorder) FindScreenshots(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScreenshots", reflect.TypeOf((*MockQuerier)(nil).FindScreenshots), ctx, arg)
}

// FindScreenshotsWithScreenshot mocks base method.
func (m *MockQuerier) FindScreenshotsWithScreenshot(ctx context.Context, arg db.FindScreenshotsWithScreenshotParams) ([]db.Screenshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScreenshotsWithScreenshot", ctx, arg)
	ret0, _ := ret[0].([]db.Screenshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScreenshotsWithScreenshot indicates an expected call of FindScreenshotsWithScreenshot.
func (mr *MockQuerierMockRecorder) FindScreenshotsWithScreenshot(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScreenshotsWithScreenshot", reflect.TypeOf((*MockQuerier)(nil).FindScreenshotsWithScreenshot), ctx, arg)
}

// FindScreenshotsWithSubdomainID mocks base method.
func (m *MockQuerier) FindScreenshotsWithSubdomainID(ctx context.Context, arg db.FindScreenshotsWithSubdomainIDParams) ([]db.Screenshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScreenshotsWithSubdomainID", ctx, arg)
	ret0, _ := ret[0].([]db.Screenshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScreenshotsWithSubdomainID indicates an expected call of FindScreenshotsWithSubdomainID.
func (mr *MockQuerierMockRecorder) FindScreenshotsWithSubdomainID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScreenshotsWithSubdomainID", reflect.TypeOf((*MockQuerier)(nil).FindScreenshotsWithSubdomainID), ctx, arg)
}

// FindStatByID mocks base method.
func (m *MockQuerier) FindStatByID(ctx context.Context, id int64) (db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatByID", ctx, id)
	ret0, _ := ret[0].(db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatByID indicates an expected call of FindStatByID.
func (mr *MockQuerierMockRecorder) FindStatByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatByID", reflect.TypeOf((*MockQuerier)(nil).FindStatByID), ctx, id)
}

// FindStatByReportID mocks base method.
func (m *MockQuerier) FindStatByReportID(ctx context.Context, reportID string) (db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatByReportID", ctx, reportID)
	ret0, _ := ret[0].(db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatByReportID indicates an expected call of FindStatByReportID.
func (mr *MockQuerierMockRecorder) FindStatByReportID(ctx, reportID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatByReportID", reflect.TypeOf((*MockQuerier)(nil).FindStatByReportID), ctx, reportID)
}

// FindStats mocks base method.
func (m *MockQuerier) FindStats(ctx context.Context) ([]db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStats", ctx)
	ret0, _ := ret[0].([]db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStats indicates an expected call of FindStats.
func (mr *MockQuerierMockRecorder) FindStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStats", reflect.TypeOf((*MockQuerier)(nil).FindStats), ctx)
}

// FindStatsWithPlatform mocks base method.
func (m *MockQuerier) FindStatsWithPlatform(ctx context.Context, platformID int64) ([]db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatsWithPlatform", ctx, platformID)
	ret0, _ := ret[0].([]db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatsWithPlatform indicates an expected call of FindStatsWithPlatform.
func (mr *MockQuerierMockRecorder) FindStatsWithPlatform(ctx, platformID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatsWithPlatform", reflect.TypeOf((*MockQuerier)(nil).FindStatsWithPlatform), ctx, platformID)
}

// FindSubdomainByIDs mocks base method.
func (m *MockQuerier) FindSubdomainByIDs(ctx context.Context, id int64) (db.Subdomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubdomainByIDs", ctx, id)
	ret0, _ := ret[0].(db.Subdomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubdomainByIDs indicates an expected call of FindSubdomainByIDs.
func (mr *MockQuerierMockRecorder) FindSubdomainByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubdomainByIDs", reflect.TypeOf((*MockQuerier)(nil).FindSubdomainByIDs), ctx, id)
}

// FindSubdomains mocks base method.
func (m *MockQuerier) FindSubdomains(ctx context.Context, arg db.FindSubdomainsParams) ([]db.Subdomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubdomains", ctx, arg)
	ret0, _ := ret[0].([]db.Subdomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubdomains indicates an expected call of FindSubdomains.
func (mr *MockQuerierMockRecorder) FindSubdomains(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubdomains", reflect.TypeOf((*MockQuerier)(nil).FindSubdomains), ctx, arg)
}

// FindSubdomainsWithProgramID mocks base method.
func (m *MockQuerier) FindSubdomainsWithProgramID(ctx context.Context, arg db.FindSubdomainsWithProgramIDParams) ([]db.Subdomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubdomainsWithProgramID", ctx, arg)
	ret0, _ := ret[0].([]db.Subdomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubdomainsWithProgramID indicates an expected call of FindSubdomainsWithProgramID.
func (mr *MockQuerierMockRecorder) FindSubdomainsWithProgramID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubdomainsWithProgramID", reflect.TypeOf((*MockQuerier)(nil).FindSubdomainsWithProgramID), ctx, arg)
}

// FindSubdomainsWithSearch mocks base method.
func (m *MockQuerier) FindSubdomainsWithSearch(ctx context.Context, arg db.FindSubdomainsWithSearchParams) ([]db.Subdomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubdomainsWithSearch", ctx, arg)
	ret0, _ := ret[0].([]db.Subdomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubdomainsWithSearch indicates an expected call of FindSubdomainsWithSearch.
func (mr *MockQuerierMockRecorder) FindSubdomainsWithSearch(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubdomainsWithSearch", reflect.TypeOf((*MockQuerier)(nil).FindSubdomainsWithSearch), ctx, arg)
}

// FindSubdomainsWithSearchAndProgramID mocks base method.
func (m *MockQuerier) FindSubdomainsWithSearchAndProgramID(ctx context.Context, arg db.FindSubdomainsWithSearchAndProgramIDParams) ([]db.Subdomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubdomainsWithSearchAndProgramID", ctx, arg)
	ret0, _ := ret[0].([]db.Subdomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubdomainsWithSearchAndProgramID indicates an expected call of FindSubdomainsWithSearchAndProgramID.
func (mr *MockQuerierMockRecorder) FindSubdomainsWithSearchAndProgramID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubdomainsWithSearchAndProgramID", reflect.TypeOf((*MockQuerier)(nil).FindSubdomainsWithSearchAndProgramID), ctx, arg)
}

// FindTaskByID mocks base method.
func (m *MockQuerier) FindTaskByID(ctx context.Context, id int64) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTaskByID", ctx, id)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTaskByID indicates an expected call of FindTaskByID.
func (mr *MockQuerierMockRecorder) FindTaskByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTaskByID", reflect.TypeOf((*MockQuerier)(nil).FindTaskByID), ctx, id)
}

// FindTasks mocks base method.
func (m *MockQuerier) FindTasks(ctx context.Context) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTasks", ctx)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTasks indicates an expected call of FindTasks.
func (mr *MockQuerierMockRecorder) FindTasks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTasks", reflect.TypeOf((*MockQuerier)(nil).FindTasks), ctx)
}

// FindUrlByIDs mocks base method.
func (m *MockQuerier) FindUrlByIDs(ctx context.Context, id int64) (db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUrlByIDs", ctx, id)
	ret0, _ := ret[0].(db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUrlByIDs indicates an expected call of FindUrlByIDs.
func (mr *MockQuerierMockRecorder) FindUrlByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUrlByIDs", reflect.TypeOf((*MockQuerier)(nil).FindUrlByIDs), ctx, id)
}

// FindUrls mocks base method.
func (m *MockQuerier) FindUrls(ctx context.Context) ([]db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUrls", ctx)
	ret0, _ := ret[0].([]db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUrls indicates an expected call of FindUrls.
func (mr *MockQuerierMockRecorder) FindUrls(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUrls", reflect.TypeOf((*MockQuerier)(nil).FindUrls), ctx)
}

// FindUrlsBySubdomain mocks base method.
func (m *MockQuerier) FindUrlsBySubdomain(ctx context.Context, arg db.FindUrlsBySubdomainParams) ([]db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUrlsBySubdomain", ctx, arg)
	ret0, _ := ret[0].([]db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUrlsBySubdomain indicates an expected call of FindUrlsBySubdomain.
func (mr *MockQuerierMockRecorder) FindUrlsBySubdomain(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUrlsBySubdomain", reflect.TypeOf((*MockQuerier)(nil).FindUrlsBySubdomain), ctx, arg)
}

// FindUrlsBySubdomainWithSearch mocks base method.
func (m *MockQuerier) FindUrlsBySubdomainWithSearch(ctx context.Context, arg db.FindUrlsBySubdomainWithSearchParams) ([]db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUrlsBySubdomainWithSearch", ctx, arg)
	ret0, _ := ret[0].([]db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUrlsBySubdomainWithSearch indicates an expected call of FindUrlsBySubdomainWithSearch.
func (mr *MockQuerierMockRecorder) FindUrlsBySubdomainWithSearch(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUrlsBySubdomainWithSearch", reflect.TypeOf((*MockQuerier)(nil).FindUrlsBySubdomainWithSearch), ctx, arg)
}

// FindUserByEmail mocks base method.
func (m *MockQuerier) FindUserByEmail(ctx context.Context, lower string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, lower)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockQuerierMockRecorder) FindUserByEmail(ctx, lower interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockQuerier)(nil).FindUserByEmail), ctx, lower)
}

// FindUserByID mocks base method.
func (m *MockQuerier) FindUserByID(ctx context.Context, id int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockQuerierMockRecorder) FindUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockQuerier)(nil).FindUserByID), ctx, id)
}

// FindVulnerabilities mocks base method.
func (m *MockQuerier) FindVulnerabilities(ctx context.Context, arg db.FindVulnerabilitiesParams) ([]db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVulnerabilities", ctx, arg)
	ret0, _ := ret[0].([]db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVulnerabilities indicates an expected call of FindVulnerabilities.
func (mr *MockQuerierMockRecorder) FindVulnerabilities(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVulnerabilities", reflect.TypeOf((*MockQuerier)(nil).FindVulnerabilities), ctx, arg)
}

// FindVulnerabilitiesWithProgramID mocks base method.
func (m *MockQuerier) FindVulnerabilitiesWithProgramID(ctx context.Context, arg db.FindVulnerabilitiesWithProgramIDParams) ([]db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVulnerabilitiesWithProgramID", ctx, arg)
	ret0, _ := ret[0].([]db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVulnerabilitiesWithProgramID indicates an expected call of FindVulnerabilitiesWithProgramID.
func (mr *MockQuerierMockRecorder) FindVulnerabilitiesWithProgramID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVulnerabilitiesWithProgramID", reflect.TypeOf((*MockQuerier)(nil).FindVulnerabilitiesWithProgramID), ctx, arg)
}

// FindVulnerabilitiesWithProgramIDAndSeverity mocks base method.
func (m *MockQuerier) FindVulnerabilitiesWithProgramIDAndSeverity(ctx context.Context, arg db.FindVulnerabilitiesWithProgramIDAndSeverityParams) ([]db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVulnerabilitiesWithProgramIDAndSeverity", ctx, arg)
	ret0, _ := ret[0].([]db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVulnerabilitiesWithProgramIDAndSeverity indicates an expected call of FindVulnerabilitiesWithProgramIDAndSeverity.
func (mr *MockQuerierMockRecorder) FindVulnerabilitiesWithProgramIDAndSeverity(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVulnerabilitiesWithProgramIDAndSeverity", reflect.TypeOf((*MockQuerier)(nil).FindVulnerabilitiesWithProgramIDAndSeverity), ctx, arg)
}

// FindVulnerabilitiesWithSearch mocks base method.
func (m *MockQuerier) FindVulnerabilitiesWithSearch(ctx context.Context, arg db.FindVulnerabilitiesWithSearchParams) ([]db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVulnerabilitiesWithSearch", ctx, arg)
	ret0, _ := ret[0].([]db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVulnerabilitiesWithSearch indicates an expected call of FindVulnerabilitiesWithSearch.
func (mr *MockQuerierMockRecorder) FindVulnerabilitiesWithSearch(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVulnerabilitiesWithSearch", reflect.TypeOf((*MockQuerier)(nil).FindVulnerabilitiesWithSearch), ctx, arg)
}

// FindVulnerabilitiesWithSearchAndProgramID mocks base method.
func (m *MockQuerier) FindVulnerabilitiesWithSearchAndProgramID(ctx context.Context, arg db.FindVulnerabilitiesWithSearchAndProgramIDParams) ([]db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVulnerabilitiesWithSearchAndProgramID", ctx, arg)
	ret0, _ := ret[0].([]db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVulnerabilitiesWithSearchAndProgramID indicates an expected call of FindVulnerabilitiesWithSearchAndProgramID.
func (mr *MockQuerierMockRecorder) FindVulnerabilitiesWithSearchAndProgramID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVulnerabilitiesWithSearchAndProgramID", reflect.TypeOf((*MockQuerier)(nil).FindVulnerabilitiesWithSearchAndProgramID), ctx, arg)
}

// FindVulnerabilitiesWithSearchAndProgramIDAndSeverity mocks base method.
func (m *MockQuerier) FindVulnerabilitiesWithSearchAndProgramIDAndSeverity(ctx context.Context, arg db.FindVulnerabilitiesWithSearchAndProgramIDAndSeverityParams) ([]db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVulnerabilitiesWithSearchAndProgramIDAndSeverity", ctx, arg)
	ret0, _ := ret[0].([]db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVulnerabilitiesWithSearchAndProgramIDAndSeverity indicates an expected call of FindVulnerabilitiesWithSearchAndProgramIDAndSeverity.
func (mr *MockQuerierMockRecorder) FindVulnerabilitiesWithSearchAndProgramIDAndSeverity(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVulnerabilitiesWithSearchAndProgramIDAndSeverity", reflect.TypeOf((*MockQuerier)(nil).FindVulnerabilitiesWithSearchAndProgramIDAndSeverity), ctx, arg)
}

// FindVulnerabilitiesWithSearchAndSeverity mocks base method.
func (m *MockQuerier) FindVulnerabilitiesWithSearchAndSeverity(ctx context.Context, arg db.FindVulnerabilitiesWithSearchAndSeverityParams) ([]db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVulnerabilitiesWithSearchAndSeverity", ctx, arg)
	ret0, _ := ret[0].([]db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVulnerabilitiesWithSearchAndSeverity indicates an expected call of FindVulnerabilitiesWithSearchAndSeverity.
func (mr *MockQuerierMockRecorder) FindVulnerabilitiesWithSearchAndSeverity(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVulnerabilitiesWithSearchAndSeverity", reflect.TypeOf((*MockQuerier)(nil).FindVulnerabilitiesWithSearchAndSeverity), ctx, arg)
}

// FindVulnerabilitiesWithSeverity mocks base method.
func (m *MockQuerier) FindVulnerabilitiesWithSeverity(ctx context.Context, arg db.FindVulnerabilitiesWithSeverityParams) ([]db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVulnerabilitiesWithSeverity", ctx, arg)
	ret0, _ := ret[0].([]db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVulnerabilitiesWithSeverity indicates an expected call of FindVulnerabilitiesWithSeverity.
func (mr *MockQuerierMockRecorder) FindVulnerabilitiesWithSeverity(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVulnerabilitiesWithSeverity", reflect.TypeOf((*MockQuerier)(nil).FindVulnerabilitiesWithSeverity), ctx, arg)
}

// FindVulnerabilityByIDs mocks base method.
func (m *MockQuerier) FindVulnerabilityByIDs(ctx context.Context, id int64) (db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVulnerabilityByIDs", ctx, id)
	ret0, _ := ret[0].(db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVulnerabilityByIDs indicates an expected call of FindVulnerabilityByIDs.
func (mr *MockQuerierMockRecorder) FindVulnerabilityByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVulnerabilityByIDs", reflect.TypeOf((*MockQuerier)(nil).FindVulnerabilityByIDs), ctx, id)
}

// GetPlatforms mocks base method.
func (m *MockQuerier) GetPlatforms(ctx context.Context) ([]db.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatforms", ctx)
	ret0, _ := ret[0].([]db.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatforms indicates an expected call of GetPlatforms.
func (mr *MockQuerierMockRecorder) GetPlatforms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockQuerier)(nil).GetPlatforms), ctx)
}

// GetScopeByProgramIDAndScope mocks base method.
func (m *MockQuerier) GetScopeByProgramIDAndScope(ctx context.Context, arg db.GetScopeByProgramIDAndScopeParams) (db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopeByProgramIDAndScope", ctx, arg)
	ret0, _ := ret[0].(db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopeByProgramIDAndScope indicates an expected call of GetScopeByProgramIDAndScope.
func (mr *MockQuerierMockRecorder) GetScopeByProgramIDAndScope(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopeByProgramIDAndScope", reflect.TypeOf((*MockQuerier)(nil).GetScopeByProgramIDAndScope), ctx, arg)
}

// GetSettingByKey mocks base method.
func (m *MockQuerier) GetSettingByKey(ctx context.Context, key string) (db.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingByKey", ctx, key)
	ret0, _ := ret[0].(db.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingByKey indicates an expected call of GetSettingByKey.
func (mr *MockQuerierMockRecorder) GetSettingByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingByKey", reflect.TypeOf((*MockQuerier)(nil).GetSettingByKey), ctx, key)
}

// GetSettings mocks base method.
func (m *MockQuerier) GetSettings(ctx context.Context) ([]db.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", ctx)
	ret0, _ := ret[0].([]db.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockQuerierMockRecorder) GetSettings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockQuerier)(nil).GetSettings), ctx)
}

// UpdateIp mocks base method.
func (m *MockQuerier) UpdateIp(ctx context.Context, arg db.UpdateIpParams) (db.Ip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIp", ctx, arg)
	ret0, _ := ret[0].(db.Ip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIp indicates an expected call of UpdateIp.
func (mr *MockQuerierMockRecorder) UpdateIp(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIp", reflect.TypeOf((*MockQuerier)(nil).UpdateIp), ctx, arg)
}

// UpdateParam mocks base method.
func (m *MockQuerier) UpdateParam(ctx context.Context, arg db.UpdateParamParams) (db.Param, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParam", ctx, arg)
	ret0, _ := ret[0].(db.Param)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParam indicates an expected call of UpdateParam.
func (mr *MockQuerierMockRecorder) UpdateParam(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParam", reflect.TypeOf((*MockQuerier)(nil).UpdateParam), ctx, arg)
}

// UpdatePlatform mocks base method.
func (m *MockQuerier) UpdatePlatform(ctx context.Context, arg db.UpdatePlatformParams) (db.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlatform", ctx, arg)
	ret0, _ := ret[0].(db.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlatform indicates an expected call of UpdatePlatform.
func (mr *MockQuerierMockRecorder) UpdatePlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatform", reflect.TypeOf((*MockQuerier)(nil).UpdatePlatform), ctx, arg)
}

// UpdatePort mocks base method.
func (m *MockQuerier) UpdatePort(ctx context.Context, arg db.UpdatePortParams) (db.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePort", ctx, arg)
	ret0, _ := ret[0].(db.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePort indicates an expected call of UpdatePort.
func (mr *MockQuerierMockRecorder) UpdatePort(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePort", reflect.TypeOf((*MockQuerier)(nil).UpdatePort), ctx, arg)
}

// UpdateProgram mocks base method.
func (m *MockQuerier) UpdateProgram(ctx context.Context, arg db.UpdateProgramParams) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgram", ctx, arg)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProgram indicates an expected call of UpdateProgram.
func (mr *MockQuerierMockRecorder) UpdateProgram(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgram", reflect.TypeOf((*MockQuerier)(nil).UpdateProgram), ctx, arg)
}

// UpdateScreenshot mocks base method.
func (m *MockQuerier) UpdateScreenshot(ctx context.Context, arg db.UpdateScreenshotParams) (db.Screenshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScreenshot", ctx, arg)
	ret0, _ := ret[0].(db.Screenshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScreenshot indicates an expected call of UpdateScreenshot.
func (mr *MockQuerierMockRecorder) UpdateScreenshot(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScreenshot", reflect.TypeOf((*MockQuerier)(nil).UpdateScreenshot), ctx, arg)
}

// UpdateSetting mocks base method.
func (m *MockQuerier) UpdateSetting(ctx context.Context, arg db.UpdateSettingParams) (db.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSetting", ctx, arg)
	ret0, _ := ret[0].(db.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSetting indicates an expected call of UpdateSetting.
func (mr *MockQuerierMockRecorder) UpdateSetting(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSetting", reflect.TypeOf((*MockQuerier)(nil).UpdateSetting), ctx, arg)
}

// UpdateStat mocks base method.
func (m *MockQuerier) UpdateStat(ctx context.Context, arg db.UpdateStatParams) (db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStat", ctx, arg)
	ret0, _ := ret[0].(db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStat indicates an expected call of UpdateStat.
func (mr *MockQuerierMockRecorder) UpdateStat(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStat", reflect.TypeOf((*MockQuerier)(nil).UpdateStat), ctx, arg)
}

// UpdateSubdomain mocks base method.
func (m *MockQuerier) UpdateSubdomain(ctx context.Context, arg db.UpdateSubdomainParams) (db.Subdomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubdomain", ctx, arg)
	ret0, _ := ret[0].(db.Subdomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubdomain indicates an expected call of UpdateSubdomain.
func (mr *MockQuerierMockRecorder) UpdateSubdomain(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubdomain", reflect.TypeOf((*MockQuerier)(nil).UpdateSubdomain), ctx, arg)
}

// UpdateTask mocks base method.
func (m *MockQuerier) UpdateTask(ctx context.Context, arg db.UpdateTaskParams) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, arg)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockQuerierMockRecorder) UpdateTask(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockQuerier)(nil).UpdateTask), ctx, arg)
}

// UpdateUrl mocks base method.
func (m *MockQuerier) UpdateUrl(ctx context.Context, arg db.UpdateUrlParams) (db.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUrl", ctx, arg)
	ret0, _ := ret[0].(db.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUrl indicates an expected call of UpdateUrl.
func (mr *MockQuerierMockRecorder) UpdateUrl(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUrl", reflect.TypeOf((*MockQuerier)(nil).UpdateUrl), ctx, arg)
}

// UpdateUserEmail mocks base method.
func (m *MockQuerier) UpdateUserEmail(ctx context.Context, arg db.UpdateUserEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockQuerierMockRecorder) UpdateUserEmail(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockQuerier)(nil).UpdateUserEmail), ctx, arg)
}

// UpdateUserPassword mocks base method.
func (m *MockQuerier) UpdateUserPassword(ctx context.Context, arg db.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockQuerierMockRecorder) UpdateUserPassword(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockQuerier)(nil).UpdateUserPassword), ctx, arg)
}

// UpdateVulnerability mocks base method.
func (m *MockQuerier) UpdateVulnerability(ctx context.Context, arg db.UpdateVulnerabilityParams) (db.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVulnerability", ctx, arg)
	ret0, _ := ret[0].(db.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVulnerability indicates an expected call of UpdateVulnerability.
func (mr *MockQuerierMockRecorder) UpdateVulnerability(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVulnerability", reflect.TypeOf((*MockQuerier)(nil).UpdateVulnerability), ctx, arg)
}

// WithTx mocks base method.
func (m *MockQuerier) WithTx(arg0 context.Context, arg1 func(db.Querier) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockQuerierMockRecorder) WithTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockQuerier)(nil).WithTx), arg0, arg1)
}
