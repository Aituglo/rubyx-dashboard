// Code generated by MockGen. DO NOT EDIT.
// Source: db/wrapper/wrapper.go

// Package wrapper is a generated GoMock package.
package wrapper

import (
	context "context"
	reflect "reflect"

	db "github.com/aituglo/rubyx/golang/db"
	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateApi mocks base method.
func (m *MockQuerier) CreateApi(ctx context.Context, arg db.CreateApiParams) (db.Api, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApi", ctx, arg)
	ret0, _ := ret[0].(db.Api)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApi indicates an expected call of CreateApi.
func (mr *MockQuerierMockRecorder) CreateApi(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApi", reflect.TypeOf((*MockQuerier)(nil).CreateApi), ctx, arg)
}

// CreateNote mocks base method.
func (m *MockQuerier) CreateNote(ctx context.Context, arg db.CreateNoteParams) (db.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, arg)
	ret0, _ := ret[0].(db.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockQuerierMockRecorder) CreateNote(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockQuerier)(nil).CreateNote), ctx, arg)
}

// CreatePlatform mocks base method.
func (m *MockQuerier) CreatePlatform(ctx context.Context, arg db.CreatePlatformParams) (db.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatform", ctx, arg)
	ret0, _ := ret[0].(db.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatform indicates an expected call of CreatePlatform.
func (mr *MockQuerierMockRecorder) CreatePlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatform", reflect.TypeOf((*MockQuerier)(nil).CreatePlatform), ctx, arg)
}

// CreateProgram mocks base method.
func (m *MockQuerier) CreateProgram(ctx context.Context, arg db.CreateProgramParams) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProgram", ctx, arg)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProgram indicates an expected call of CreateProgram.
func (mr *MockQuerierMockRecorder) CreateProgram(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgram", reflect.TypeOf((*MockQuerier)(nil).CreateProgram), ctx, arg)
}

// CreateReset mocks base method.
func (m *MockQuerier) CreateReset(ctx context.Context, arg db.CreateResetParams) (db.Reset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReset", ctx, arg)
	ret0, _ := ret[0].(db.Reset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReset indicates an expected call of CreateReset.
func (mr *MockQuerierMockRecorder) CreateReset(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReset", reflect.TypeOf((*MockQuerier)(nil).CreateReset), ctx, arg)
}

// CreateScope mocks base method.
func (m *MockQuerier) CreateScope(ctx context.Context, arg db.CreateScopeParams) (db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScope", ctx, arg)
	ret0, _ := ret[0].(db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScope indicates an expected call of CreateScope.
func (mr *MockQuerierMockRecorder) CreateScope(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockQuerier)(nil).CreateScope), ctx, arg)
}

// CreateStat mocks base method.
func (m *MockQuerier) CreateStat(ctx context.Context, arg db.CreateStatParams) (db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStat", ctx, arg)
	ret0, _ := ret[0].(db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStat indicates an expected call of CreateStat.
func (mr *MockQuerierMockRecorder) CreateStat(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStat", reflect.TypeOf((*MockQuerier)(nil).CreateStat), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// DeleteApiByIDs mocks base method.
func (m *MockQuerier) DeleteApiByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiByIDs indicates an expected call of DeleteApiByIDs.
func (mr *MockQuerierMockRecorder) DeleteApiByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteApiByIDs), ctx, id)
}

// DeleteNote mocks base method.
func (m *MockQuerier) DeleteNote(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockQuerierMockRecorder) DeleteNote(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockQuerier)(nil).DeleteNote), ctx, id)
}

// DeletePlatformByIDs mocks base method.
func (m *MockQuerier) DeletePlatformByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlatformByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlatformByIDs indicates an expected call of DeletePlatformByIDs.
func (mr *MockQuerierMockRecorder) DeletePlatformByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatformByIDs", reflect.TypeOf((*MockQuerier)(nil).DeletePlatformByIDs), ctx, id)
}

// DeleteProgramByIDs mocks base method.
func (m *MockQuerier) DeleteProgramByIDs(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProgramByIDs", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProgramByIDs indicates an expected call of DeleteProgramByIDs.
func (mr *MockQuerierMockRecorder) DeleteProgramByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgramByIDs", reflect.TypeOf((*MockQuerier)(nil).DeleteProgramByIDs), ctx, id)
}

// DeleteProgramBySlug mocks base method.
func (m *MockQuerier) DeleteProgramBySlug(ctx context.Context, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProgramBySlug", ctx, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProgramBySlug indicates an expected call of DeleteProgramBySlug.
func (mr *MockQuerierMockRecorder) DeleteProgramBySlug(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgramBySlug", reflect.TypeOf((*MockQuerier)(nil).DeleteProgramBySlug), ctx, slug)
}

// DeleteResetsForUser mocks base method.
func (m *MockQuerier) DeleteResetsForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResetsForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResetsForUser indicates an expected call of DeleteResetsForUser.
func (mr *MockQuerierMockRecorder) DeleteResetsForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResetsForUser", reflect.TypeOf((*MockQuerier)(nil).DeleteResetsForUser), ctx, userID)
}

// DeleteScopeByID mocks base method.
func (m *MockQuerier) DeleteScopeByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScopeByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScopeByID indicates an expected call of DeleteScopeByID.
func (mr *MockQuerierMockRecorder) DeleteScopeByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScopeByID", reflect.TypeOf((*MockQuerier)(nil).DeleteScopeByID), ctx, id)
}

// DeleteStatByID mocks base method.
func (m *MockQuerier) DeleteStatByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatByID indicates an expected call of DeleteStatByID.
func (mr *MockQuerierMockRecorder) DeleteStatByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatByID", reflect.TypeOf((*MockQuerier)(nil).DeleteStatByID), ctx, id)
}

// FindApiByIDs mocks base method.
func (m *MockQuerier) FindApiByIDs(ctx context.Context, id int64) (db.Api, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindApiByIDs", ctx, id)
	ret0, _ := ret[0].(db.Api)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindApiByIDs indicates an expected call of FindApiByIDs.
func (mr *MockQuerierMockRecorder) FindApiByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindApiByIDs", reflect.TypeOf((*MockQuerier)(nil).FindApiByIDs), ctx, id)
}

// FindApis mocks base method.
func (m *MockQuerier) FindApis(ctx context.Context) ([]db.Api, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindApis", ctx)
	ret0, _ := ret[0].([]db.Api)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindApis indicates an expected call of FindApis.
func (mr *MockQuerierMockRecorder) FindApis(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindApis", reflect.TypeOf((*MockQuerier)(nil).FindApis), ctx)
}

// FindNoteByID mocks base method.
func (m *MockQuerier) FindNoteByID(ctx context.Context, id int64) (db.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNoteByID", ctx, id)
	ret0, _ := ret[0].(db.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNoteByID indicates an expected call of FindNoteByID.
func (mr *MockQuerierMockRecorder) FindNoteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNoteByID", reflect.TypeOf((*MockQuerier)(nil).FindNoteByID), ctx, id)
}

// FindNotes mocks base method.
func (m *MockQuerier) FindNotes(ctx context.Context) ([]db.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNotes", ctx)
	ret0, _ := ret[0].([]db.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotes indicates an expected call of FindNotes.
func (mr *MockQuerierMockRecorder) FindNotes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotes", reflect.TypeOf((*MockQuerier)(nil).FindNotes), ctx)
}

// FindNotesByProgramID mocks base method.
func (m *MockQuerier) FindNotesByProgramID(ctx context.Context, programID int64) ([]db.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNotesByProgramID", ctx, programID)
	ret0, _ := ret[0].([]db.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotesByProgramID indicates an expected call of FindNotesByProgramID.
func (mr *MockQuerierMockRecorder) FindNotesByProgramID(ctx, programID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotesByProgramID", reflect.TypeOf((*MockQuerier)(nil).FindNotesByProgramID), ctx, programID)
}

// FindPlatformByIDs mocks base method.
func (m *MockQuerier) FindPlatformByIDs(ctx context.Context, id int64) (db.FindPlatformByIDsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlatformByIDs", ctx, id)
	ret0, _ := ret[0].(db.FindPlatformByIDsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlatformByIDs indicates an expected call of FindPlatformByIDs.
func (mr *MockQuerierMockRecorder) FindPlatformByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlatformByIDs", reflect.TypeOf((*MockQuerier)(nil).FindPlatformByIDs), ctx, id)
}

// FindPlatforms mocks base method.
func (m *MockQuerier) FindPlatforms(ctx context.Context) ([]db.FindPlatformsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlatforms", ctx)
	ret0, _ := ret[0].([]db.FindPlatformsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlatforms indicates an expected call of FindPlatforms.
func (mr *MockQuerierMockRecorder) FindPlatforms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlatforms", reflect.TypeOf((*MockQuerier)(nil).FindPlatforms), ctx)
}

// FindProgramByIDs mocks base method.
func (m *MockQuerier) FindProgramByIDs(ctx context.Context, id int64) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramByIDs", ctx, id)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramByIDs indicates an expected call of FindProgramByIDs.
func (mr *MockQuerierMockRecorder) FindProgramByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramByIDs", reflect.TypeOf((*MockQuerier)(nil).FindProgramByIDs), ctx, id)
}

// FindProgramBySlug mocks base method.
func (m *MockQuerier) FindProgramBySlug(ctx context.Context, slug string) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProgramBySlug", ctx, slug)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProgramBySlug indicates an expected call of FindProgramBySlug.
func (mr *MockQuerierMockRecorder) FindProgramBySlug(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProgramBySlug", reflect.TypeOf((*MockQuerier)(nil).FindProgramBySlug), ctx, slug)
}

// FindPrograms mocks base method.
func (m *MockQuerier) FindPrograms(ctx context.Context) ([]db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrograms", ctx)
	ret0, _ := ret[0].([]db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrograms indicates an expected call of FindPrograms.
func (mr *MockQuerierMockRecorder) FindPrograms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrograms", reflect.TypeOf((*MockQuerier)(nil).FindPrograms), ctx)
}

// FindResetByCode mocks base method.
func (m *MockQuerier) FindResetByCode(ctx context.Context, code string) (db.Reset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindResetByCode", ctx, code)
	ret0, _ := ret[0].(db.Reset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindResetByCode indicates an expected call of FindResetByCode.
func (mr *MockQuerierMockRecorder) FindResetByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResetByCode", reflect.TypeOf((*MockQuerier)(nil).FindResetByCode), ctx, code)
}

// FindScopeByID mocks base method.
func (m *MockQuerier) FindScopeByID(ctx context.Context, id int64) (db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScopeByID", ctx, id)
	ret0, _ := ret[0].(db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScopeByID indicates an expected call of FindScopeByID.
func (mr *MockQuerierMockRecorder) FindScopeByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScopeByID", reflect.TypeOf((*MockQuerier)(nil).FindScopeByID), ctx, id)
}

// FindScopes mocks base method.
func (m *MockQuerier) FindScopes(ctx context.Context) ([]db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScopes", ctx)
	ret0, _ := ret[0].([]db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScopes indicates an expected call of FindScopes.
func (mr *MockQuerierMockRecorder) FindScopes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScopes", reflect.TypeOf((*MockQuerier)(nil).FindScopes), ctx)
}

// FindScopesByProgramID mocks base method.
func (m *MockQuerier) FindScopesByProgramID(ctx context.Context, programID int64) ([]db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScopesByProgramID", ctx, programID)
	ret0, _ := ret[0].([]db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScopesByProgramID indicates an expected call of FindScopesByProgramID.
func (mr *MockQuerierMockRecorder) FindScopesByProgramID(ctx, programID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScopesByProgramID", reflect.TypeOf((*MockQuerier)(nil).FindScopesByProgramID), ctx, programID)
}

// FindStatByID mocks base method.
func (m *MockQuerier) FindStatByID(ctx context.Context, id int64) (db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatByID", ctx, id)
	ret0, _ := ret[0].(db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatByID indicates an expected call of FindStatByID.
func (mr *MockQuerierMockRecorder) FindStatByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatByID", reflect.TypeOf((*MockQuerier)(nil).FindStatByID), ctx, id)
}

// FindStatByReportID mocks base method.
func (m *MockQuerier) FindStatByReportID(ctx context.Context, reportID string) (db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatByReportID", ctx, reportID)
	ret0, _ := ret[0].(db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatByReportID indicates an expected call of FindStatByReportID.
func (mr *MockQuerierMockRecorder) FindStatByReportID(ctx, reportID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatByReportID", reflect.TypeOf((*MockQuerier)(nil).FindStatByReportID), ctx, reportID)
}

// FindStats mocks base method.
func (m *MockQuerier) FindStats(ctx context.Context) ([]db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStats", ctx)
	ret0, _ := ret[0].([]db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStats indicates an expected call of FindStats.
func (mr *MockQuerierMockRecorder) FindStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStats", reflect.TypeOf((*MockQuerier)(nil).FindStats), ctx)
}

// FindUserByEmail mocks base method.
func (m *MockQuerier) FindUserByEmail(ctx context.Context, lower string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, lower)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockQuerierMockRecorder) FindUserByEmail(ctx, lower interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockQuerier)(nil).FindUserByEmail), ctx, lower)
}

// FindUserByID mocks base method.
func (m *MockQuerier) FindUserByID(ctx context.Context, id int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockQuerierMockRecorder) FindUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockQuerier)(nil).FindUserByID), ctx, id)
}

// GetPlatforms mocks base method.
func (m *MockQuerier) GetPlatforms(ctx context.Context) ([]db.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatforms", ctx)
	ret0, _ := ret[0].([]db.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatforms indicates an expected call of GetPlatforms.
func (mr *MockQuerierMockRecorder) GetPlatforms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockQuerier)(nil).GetPlatforms), ctx)
}

// GetScopeByProgramIDAndScope mocks base method.
func (m *MockQuerier) GetScopeByProgramIDAndScope(ctx context.Context, arg db.GetScopeByProgramIDAndScopeParams) (db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopeByProgramIDAndScope", ctx, arg)
	ret0, _ := ret[0].(db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopeByProgramIDAndScope indicates an expected call of GetScopeByProgramIDAndScope.
func (mr *MockQuerierMockRecorder) GetScopeByProgramIDAndScope(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopeByProgramIDAndScope", reflect.TypeOf((*MockQuerier)(nil).GetScopeByProgramIDAndScope), ctx, arg)
}

// UpdateNote mocks base method.
func (m *MockQuerier) UpdateNote(ctx context.Context, arg db.UpdateNoteParams) (db.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, arg)
	ret0, _ := ret[0].(db.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockQuerierMockRecorder) UpdateNote(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockQuerier)(nil).UpdateNote), ctx, arg)
}

// UpdatePlatform mocks base method.
func (m *MockQuerier) UpdatePlatform(ctx context.Context, arg db.UpdatePlatformParams) (db.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlatform", ctx, arg)
	ret0, _ := ret[0].(db.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlatform indicates an expected call of UpdatePlatform.
func (mr *MockQuerierMockRecorder) UpdatePlatform(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatform", reflect.TypeOf((*MockQuerier)(nil).UpdatePlatform), ctx, arg)
}

// UpdateProgram mocks base method.
func (m *MockQuerier) UpdateProgram(ctx context.Context, arg db.UpdateProgramParams) (db.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgram", ctx, arg)
	ret0, _ := ret[0].(db.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProgram indicates an expected call of UpdateProgram.
func (mr *MockQuerierMockRecorder) UpdateProgram(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgram", reflect.TypeOf((*MockQuerier)(nil).UpdateProgram), ctx, arg)
}

// UpdateStat mocks base method.
func (m *MockQuerier) UpdateStat(ctx context.Context, arg db.UpdateStatParams) (db.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStat", ctx, arg)
	ret0, _ := ret[0].(db.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStat indicates an expected call of UpdateStat.
func (mr *MockQuerierMockRecorder) UpdateStat(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStat", reflect.TypeOf((*MockQuerier)(nil).UpdateStat), ctx, arg)
}

// UpdateUserEmail mocks base method.
func (m *MockQuerier) UpdateUserEmail(ctx context.Context, arg db.UpdateUserEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockQuerierMockRecorder) UpdateUserEmail(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockQuerier)(nil).UpdateUserEmail), ctx, arg)
}

// UpdateUserPassword mocks base method.
func (m *MockQuerier) UpdateUserPassword(ctx context.Context, arg db.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockQuerierMockRecorder) UpdateUserPassword(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockQuerier)(nil).UpdateUserPassword), ctx, arg)
}

// WithTx mocks base method.
func (m *MockQuerier) WithTx(arg0 context.Context, arg1 func(db.Querier) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockQuerierMockRecorder) WithTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockQuerier)(nil).WithTx), arg0, arg1)
}
