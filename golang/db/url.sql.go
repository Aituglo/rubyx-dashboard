// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: url.sql

package db

import (
	"context"
)

const countUrlsBySubdomain = `-- name: CountUrlsBySubdomain :one
SELECT COUNT(*) FROM urls WHERE subdomain_id = $1
`

func (q *Queries) CountUrlsBySubdomain(ctx context.Context, subdomainID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countUrlsBySubdomain, subdomainID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (subdomain_id, url, status_code, tag) VALUES ($1, $2, $3, $4) RETURNING id, subdomain_id, url, tag, status_code, favourite, created_at, updated_at
`

type CreateUrlParams struct {
	SubdomainID int64  `json:"subdomain_id"`
	Url         string `json:"url"`
	StatusCode  int32  `json:"status_code"`
	Tag         string `json:"tag"`
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRow(ctx, createUrl,
		arg.SubdomainID,
		arg.Url,
		arg.StatusCode,
		arg.Tag,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Url,
		&i.Tag,
		&i.StatusCode,
		&i.Favourite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUrlByIDs = `-- name: DeleteUrlByIDs :exec
DELETE FROM urls WHERE id = $1
`

func (q *Queries) DeleteUrlByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUrlByIDs, id)
	return err
}

const favouriteUrl = `-- name: FavouriteUrl :one
UPDATE urls SET favourite = $2, updated_at = NOW() WHERE id = $1 RETURNING id, subdomain_id, url, tag, status_code, favourite, created_at, updated_at
`

type FavouriteUrlParams struct {
	ID        int64 `json:"id"`
	Favourite bool  `json:"favourite"`
}

func (q *Queries) FavouriteUrl(ctx context.Context, arg FavouriteUrlParams) (Url, error) {
	row := q.db.QueryRow(ctx, favouriteUrl, arg.ID, arg.Favourite)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Url,
		&i.Tag,
		&i.StatusCode,
		&i.Favourite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUrlByIDs = `-- name: FindUrlByIDs :one
SELECT id, subdomain_id, url, tag, status_code, favourite, created_at, updated_at FROM urls WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUrlByIDs(ctx context.Context, id int64) (Url, error) {
	row := q.db.QueryRow(ctx, findUrlByIDs, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Url,
		&i.Tag,
		&i.StatusCode,
		&i.Favourite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUrls = `-- name: FindUrls :many
SELECT id, subdomain_id, url, tag, status_code, favourite, created_at, updated_at FROM urls
`

func (q *Queries) FindUrls(ctx context.Context) ([]Url, error) {
	rows, err := q.db.Query(ctx, findUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.SubdomainID,
			&i.Url,
			&i.Tag,
			&i.StatusCode,
			&i.Favourite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUrlsBySubdomain = `-- name: FindUrlsBySubdomain :many
SELECT id, subdomain_id, url, tag, status_code, favourite, created_at, updated_at FROM urls WHERE subdomain_id = $1 LIMIT $2 OFFSET $3
`

type FindUrlsBySubdomainParams struct {
	SubdomainID int64 `json:"subdomain_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) FindUrlsBySubdomain(ctx context.Context, arg FindUrlsBySubdomainParams) ([]Url, error) {
	rows, err := q.db.Query(ctx, findUrlsBySubdomain, arg.SubdomainID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.SubdomainID,
			&i.Url,
			&i.Tag,
			&i.StatusCode,
			&i.Favourite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUrlsBySubdomainWithSearch = `-- name: FindUrlsBySubdomainWithSearch :many
SELECT id, subdomain_id, url, tag, status_code, favourite, created_at, updated_at FROM urls WHERE subdomain_id = $1 AND url LIKE $2 LIMIT $3 OFFSET $4
`

type FindUrlsBySubdomainWithSearchParams struct {
	SubdomainID int64  `json:"subdomain_id"`
	Url         string `json:"url"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) FindUrlsBySubdomainWithSearch(ctx context.Context, arg FindUrlsBySubdomainWithSearchParams) ([]Url, error) {
	rows, err := q.db.Query(ctx, findUrlsBySubdomainWithSearch,
		arg.SubdomainID,
		arg.Url,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.SubdomainID,
			&i.Url,
			&i.Tag,
			&i.StatusCode,
			&i.Favourite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUrl = `-- name: UpdateUrl :one
UPDATE urls SET subdomain_id = $2, url = $3, status_code = $4, tag = $5, updated_at = NOW() WHERE id = $1 RETURNING id, subdomain_id, url, tag, status_code, favourite, created_at, updated_at
`

type UpdateUrlParams struct {
	ID          int64  `json:"id"`
	SubdomainID int64  `json:"subdomain_id"`
	Url         string `json:"url"`
	StatusCode  int32  `json:"status_code"`
	Tag         string `json:"tag"`
}

func (q *Queries) UpdateUrl(ctx context.Context, arg UpdateUrlParams) (Url, error) {
	row := q.db.QueryRow(ctx, updateUrl,
		arg.ID,
		arg.SubdomainID,
		arg.Url,
		arg.StatusCode,
		arg.Tag,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Url,
		&i.Tag,
		&i.StatusCode,
		&i.Favourite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
