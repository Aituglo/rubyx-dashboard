// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: url.sql

package db

import (
	"context"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (subdomain_id, url, title, body_hash, status_code, technologies, content_length) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, subdomain_id, url, title, body_hash, status_code, technologies, content_length, created_at, updated_at
`

type CreateUrlParams struct {
	SubdomainID   int64  `json:"subdomain_id"`
	Url           string `json:"url"`
	Title         string `json:"title"`
	BodyHash      string `json:"body_hash"`
	StatusCode    int32  `json:"status_code"`
	Technologies  string `json:"technologies"`
	ContentLength int32  `json:"content_length"`
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRow(ctx, createUrl,
		arg.SubdomainID,
		arg.Url,
		arg.Title,
		arg.BodyHash,
		arg.StatusCode,
		arg.Technologies,
		arg.ContentLength,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Url,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.Technologies,
		&i.ContentLength,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUrlByIDs = `-- name: DeleteUrlByIDs :exec
DELETE FROM urls WHERE id = $1
`

func (q *Queries) DeleteUrlByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUrlByIDs, id)
	return err
}

const findUrlByIDs = `-- name: FindUrlByIDs :one
SELECT id, subdomain_id, url, title, body_hash, status_code, technologies, content_length, created_at, updated_at FROM urls WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUrlByIDs(ctx context.Context, id int64) (Url, error) {
	row := q.db.QueryRow(ctx, findUrlByIDs, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Url,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.Technologies,
		&i.ContentLength,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUrls = `-- name: FindUrls :many
SELECT id, subdomain_id, url, title, body_hash, status_code, technologies, content_length, created_at, updated_at FROM urls
`

func (q *Queries) FindUrls(ctx context.Context) ([]Url, error) {
	rows, err := q.db.Query(ctx, findUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.SubdomainID,
			&i.Url,
			&i.Title,
			&i.BodyHash,
			&i.StatusCode,
			&i.Technologies,
			&i.ContentLength,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUrl = `-- name: UpdateUrl :one
UPDATE urls SET subdomain_id = $2, url = $3, title = $4, body_hash = $5, status_code = $6, technologies = $7, content_length = $8, updated_at = NOW() WHERE id = $1 RETURNING id, subdomain_id, url, title, body_hash, status_code, technologies, content_length, created_at, updated_at
`

type UpdateUrlParams struct {
	ID            int64  `json:"id"`
	SubdomainID   int64  `json:"subdomain_id"`
	Url           string `json:"url"`
	Title         string `json:"title"`
	BodyHash      string `json:"body_hash"`
	StatusCode    int32  `json:"status_code"`
	Technologies  string `json:"technologies"`
	ContentLength int32  `json:"content_length"`
}

func (q *Queries) UpdateUrl(ctx context.Context, arg UpdateUrlParams) (Url, error) {
	row := q.db.QueryRow(ctx, updateUrl,
		arg.ID,
		arg.SubdomainID,
		arg.Url,
		arg.Title,
		arg.BodyHash,
		arg.StatusCode,
		arg.Technologies,
		arg.ContentLength,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.SubdomainID,
		&i.Url,
		&i.Title,
		&i.BodyHash,
		&i.StatusCode,
		&i.Technologies,
		&i.ContentLength,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
