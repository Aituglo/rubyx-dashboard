// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: scan.sql

package db

import (
	"context"
	"time"
)

const createScan = `-- name: CreateScan :one
INSERT INTO scans (id, domain, params, status, type, output)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, domain, params, type, status, start_time, end_time, created_at, updated_at, output
`

type CreateScanParams struct {
	ID     string `json:"id"`
	Domain string `json:"domain"`
	Params string `json:"params"`
	Status string `json:"status"`
	Type   string `json:"type"`
	Output string `json:"output"`
}

func (q *Queries) CreateScan(ctx context.Context, arg CreateScanParams) (Scan, error) {
	row := q.db.QueryRow(ctx, createScan,
		arg.ID,
		arg.Domain,
		arg.Params,
		arg.Status,
		arg.Type,
		arg.Output,
	)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Params,
		&i.Type,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Output,
	)
	return i, err
}

const deleteScanByIDs = `-- name: DeleteScanByIDs :exec
DELETE FROM scans WHERE id = $1
`

func (q *Queries) DeleteScanByIDs(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteScanByIDs, id)
	return err
}

const findScanByID = `-- name: FindScanByID :one
SELECT id, domain, params, type, status, start_time, end_time, created_at, updated_at, output FROM scans WHERE id = $1 LIMIT 1
`

func (q *Queries) FindScanByID(ctx context.Context, id string) (Scan, error) {
	row := q.db.QueryRow(ctx, findScanByID, id)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Params,
		&i.Type,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Output,
	)
	return i, err
}

const findScans = `-- name: FindScans :many
SELECT id, domain, params, type, status, start_time, end_time, created_at, updated_at, output FROM scans
`

func (q *Queries) FindScans(ctx context.Context) ([]Scan, error) {
	rows, err := q.db.Query(ctx, findScans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Scan{}
	for rows.Next() {
		var i Scan
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Params,
			&i.Type,
			&i.Status,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Output,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScan = `-- name: UpdateScan :one
UPDATE scans
SET status = $2, start_time = $3, end_time = $4, output = $5, updated_at = now()
WHERE id = $1
RETURNING id, domain, params, type, status, start_time, end_time, created_at, updated_at, output
`

type UpdateScanParams struct {
	ID        string    `json:"id"`
	Status    string    `json:"status"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
	Output    string    `json:"output"`
}

func (q *Queries) UpdateScan(ctx context.Context, arg UpdateScanParams) (Scan, error) {
	row := q.db.QueryRow(ctx, updateScan,
		arg.ID,
		arg.Status,
		arg.StartTime,
		arg.EndTime,
		arg.Output,
	)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Params,
		&i.Type,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Output,
	)
	return i, err
}
