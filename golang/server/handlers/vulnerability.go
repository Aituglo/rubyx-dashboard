package handlers

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/aituglo/rubyx/golang/db"
	"github.com/aituglo/rubyx/golang/env"
	"github.com/aituglo/rubyx/golang/errors"
	"github.com/aituglo/rubyx/golang/server/write"
)

type VulnerabilityPagination struct {
	Vulnerabilities []db.Vulnerability `json:"vulnerabilities"`
	Total           int                `json:"total"`
}

func CreateVulnerability(env env.Env, user *db.User, w http.ResponseWriter, r *http.Request) http.HandlerFunc {
	if user == nil {
		return write.Error(errors.RouteUnauthorized)
	}

	decoder := json.NewDecoder(r.Body)
	p := &db.Vulnerability{}
	err := decoder.Decode(p)
	if err != nil || p == nil {
		return write.Error(errors.NoJSONBody)
	}

	return write.JSONorErr(env.DB().CreateVulnerability(r.Context(), db.CreateVulnerabilityParams{
		ProgramID: p.ProgramID,
		Severity:  p.Severity,
		Type:      p.Type,
	}))
}

func GetVulnerability(env env.Env, user *db.User, w http.ResponseWriter, r *http.Request) http.HandlerFunc {
	if user == nil {
		return write.Error(errors.RouteUnauthorized)
	}

	id, err := getID(r)
	if err != nil {
		return write.Error(errors.RouteNotFound)
	}

	vulnerability, err := env.DB().FindVulnerabilityByIDs(r.Context(), id)
	if err != nil {
		if isNotFound(err) {
			return write.Error(errors.ItemNotFound)
		}
		return write.Error(err)
	}

	return write.JSON(vulnerability)
}

func GetVulnerabilities(env env.Env, user *db.User, w http.ResponseWriter, r *http.Request) http.HandlerFunc {
	if user == nil {
		return write.Error(errors.RouteUnauthorized)
	}

	page, err := strconv.Atoi(r.URL.Query().Get("page"))
	if err != nil || page < 1 {
		page = 1
	}

	resultsPerPage, err := strconv.Atoi(r.URL.Query().Get("resultsPerPage"))
	if err != nil || resultsPerPage < 1 {
		resultsPerPage = 30
	}

	totalVulnerabilities, err := env.DB().CountVulnerabilities(r.Context())
	if err != nil {
		return write.Error(err)
	}

	search := r.URL.Query().Get("search")
	severity := r.URL.Query().Get("severity")
	programIDStr := r.URL.Query().Get("program_id")
	var programID int64
	programIDProvided := false
	if programIDStr != "" {
		id, err := strconv.ParseInt(programIDStr, 10, 64)
		if err != nil {
			return write.Error(err)
		}
		programID = id
		if programID > 0 {
			programIDProvided = true
		} else {
			programIDProvided = false
		}
	}

	var vulnerabilities []db.Vulnerability
	if search != "" && severity != "" && programIDProvided {
		vulnerabilities, err = env.DB().FindVulnerabilitiesWithSearchAndProgramIDAndSeverity(r.Context(), db.FindVulnerabilitiesWithSearchAndProgramIDAndSeverityParams{
			Limit:         int32(resultsPerPage),
			Offset:        int32((page - 1) * resultsPerPage),
			ProgramID:     programID,
			Url:           "%" + search + "%",
			StringToArray: severity,
		})
	} else if search == "" && severity != "" && programIDProvided {
		vulnerabilities, err = env.DB().FindVulnerabilitiesWithProgramIDAndSeverity(r.Context(), db.FindVulnerabilitiesWithProgramIDAndSeverityParams{
			Limit:         int32(resultsPerPage),
			Offset:        int32((page - 1) * resultsPerPage),
			ProgramID:     programID,
			StringToArray: severity,
		})
	} else if search != "" && severity == "" && programIDProvided {
		vulnerabilities, err = env.DB().FindVulnerabilitiesWithSearchAndProgramID(r.Context(), db.FindVulnerabilitiesWithSearchAndProgramIDParams{
			Limit:     int32(resultsPerPage),
			Offset:    int32((page - 1) * resultsPerPage),
			ProgramID: programID,
			Url:       "%" + search + "%",
		})
	} else if search != "" && severity != "" && !programIDProvided {
		vulnerabilities, err = env.DB().FindVulnerabilitiesWithSearchAndSeverity(r.Context(), db.FindVulnerabilitiesWithSearchAndSeverityParams{
			Limit:         int32(resultsPerPage),
			Offset:        int32((page - 1) * resultsPerPage),
			Url:           "%" + search + "%",
			StringToArray: severity,
		})
	} else if search != "" && severity == "" && !programIDProvided {
		vulnerabilities, err = env.DB().FindVulnerabilitiesWithSearch(r.Context(), db.FindVulnerabilitiesWithSearchParams{
			Limit:  int32(resultsPerPage),
			Offset: int32((page - 1) * resultsPerPage),
			Url:    "%" + search + "%",
		})
	} else if search == "" && severity != "" && !programIDProvided {
		vulnerabilities, err = env.DB().FindVulnerabilitiesWithSeverity(r.Context(), db.FindVulnerabilitiesWithSeverityParams{
			Limit:         int32(resultsPerPage),
			Offset:        int32((page - 1) * resultsPerPage),
			StringToArray: severity,
		})
	} else if search == "" && severity == "" && programIDProvided {
		vulnerabilities, err = env.DB().FindVulnerabilitiesWithProgramID(r.Context(), db.FindVulnerabilitiesWithProgramIDParams{
			Limit:     int32(resultsPerPage),
			Offset:    int32((page - 1) * resultsPerPage),
			ProgramID: programID,
		})
	} else {
		vulnerabilities, err = env.DB().FindVulnerabilities(r.Context(), db.FindVulnerabilitiesParams{Limit: int32(resultsPerPage), Offset: int32((page - 1) * resultsPerPage)})
	}
	if err != nil {
		return write.Error(err)
	}

	return write.JSONorErr(VulnerabilityPagination{
		Vulnerabilities: vulnerabilities,
		Total:           int(totalVulnerabilities),
	}, nil)
}

func UpdateVulnerability(env env.Env, user *db.User, w http.ResponseWriter, r *http.Request) http.HandlerFunc {
	if user == nil {
		return write.Error(errors.RouteUnauthorized)
	}

	decoder := json.NewDecoder(r.Body)
	p := &db.Vulnerability{}
	err := decoder.Decode(p)
	if err != nil || p == nil {
		return write.Error(errors.NoJSONBody)
	}

	return write.JSONorErr(env.DB().UpdateVulnerability(r.Context(), db.UpdateVulnerabilityParams{
		ID:        p.ID,
		ProgramID: p.ProgramID,
		Severity:  p.Severity,
		Type:      p.Type,
	}))
}

func DeleteVulnerability(env env.Env, user *db.User, w http.ResponseWriter, r *http.Request) http.HandlerFunc {
	if user == nil {
		return write.Error(errors.RouteUnauthorized)
	}

	id, err := getID(r)
	if err != nil {
		return write.Error(errors.RouteNotFound)
	}

	return write.SuccessOrErr(env.DB().DeleteVulnerabilityByIDs(r.Context(), id))
}
